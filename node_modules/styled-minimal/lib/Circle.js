"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Circle = exports.StyledPath = exports.StyledSVG = exports.StyledSVGWrapper = void 0;
var React = require("react");
var styled_components_1 = require("styled-components");
var helpers_1 = require("./utils/helpers");
var imperfection_1 = require("./utils/imperfection");
var system_1 = require("./utils/system");
exports.StyledSVGWrapper = styled_components_1.default('div')(function () { return styled_components_1.css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    align-items: center;\n    display: flex;\n    justify-content: center;\n    position: relative;\n  "], ["\n    align-items: center;\n    display: flex;\n    justify-content: center;\n    position: relative;\n  "]))); }, system_1.sx, system_1.system);
exports.StyledSVG = styled_components_1.default('svg')(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  left: 50%;\n  margin-bottom: 20px;\n  overflow: visible;\n  position: absolute;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  z-index: -1;\n"], ["\n  left: 50%;\n  margin-bottom: 20px;\n  overflow: visible;\n  position: absolute;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  z-index: -1;\n"])));
exports.StyledPath = styled_components_1.default('path')(function (props) {
    var invert = props.invert, stroke = props.stroke;
    var color = helpers_1.getColor(props);
    return styled_components_1.css(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n    ", ";\n    fill: ", ";\n    stroke: ", ";\n    stroke-width: ", ";\n    transition: d 0.2s;\n  "], ["\n    ", ";\n    fill: ", ";\n    stroke: ", ";\n    stroke-width: ", ";\n    transition: d 0.2s;\n  "])), system_1.baseStyles, invert ? 'none' : color, invert ? color : 'none', invert ? helpers_1.px(stroke) : 0);
});
exports.Circle = React.forwardRef(function (props, ref) {
    var animate = props.animate, children = props.children, limit = props.limit, mutation = props.mutation, randomize = props.randomize, size = props.size, speed = props.speed, variant = props.variant, rest = __rest(props, ["animate", "children", "limit", "mutation", "randomize", "size", "speed", "variant"]);
    var _a = React.useState({
        amount: 0,
        direction: 'forward',
    }), animation = _a[0], setAnimation = _a[1];
    var circle = React.useRef();
    var interval = React.useRef();
    if (!animate) {
        circle.current = imperfection_1.generateCircle(mutation, randomize);
    }
    React.useEffect(function () {
        var amount = animation.amount, direction = animation.direction;
        if (animate) {
            interval.current = window.setInterval(function () {
                circle.current = imperfection_1.generateCircle(amount, randomize);
                var nextDirection = amount + 1 > limit ? 'backward' : direction;
                if (amount <= -limit) {
                    nextDirection = 'forward';
                }
                setAnimation({
                    amount: amount + (nextDirection === 'forward' ? 1 : -1),
                    direction: nextDirection,
                });
            }, speed);
        }
        return function () {
            clearInterval(interval.current);
        };
    }, [animate, animation, limit, randomize, speed]);
    return (React.createElement(exports.StyledSVGWrapper, __assign({}, props),
        React.createElement(exports.StyledSVG, __assign({ height: size * 0.9 + "px", preserveAspectRatio: "xMidYMid", ref: ref, version: "1.1", viewBox: "0 0 256 256", width: size * 0.9 + "px", xmlns: "http://www.w3.org/2000/svg" }, rest),
            React.createElement(exports.StyledPath, __assign({ d: circle.current }, props))),
        children));
});
exports.Circle.defaultProps = {
    animate: false,
    limit: 30,
    mutation: 0,
    invert: false,
    size: 100,
    speed: 50,
    stroke: 2,
    variant: 'primary',
};
var templateObject_1, templateObject_2, templateObject_3;
//# sourceMappingURL=Circle.js.map