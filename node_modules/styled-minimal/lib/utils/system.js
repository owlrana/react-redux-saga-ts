"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.variantStyles = exports.system = exports.sx = exports.inputStyles = exports.mutationStyles = exports.lineHeightStyles = exports.colorStyles = exports.baseStyles = exports.appearanceStyles = exports.inputTextTypes = void 0;
var styled_components_1 = require("styled-components");
var css_1 = require("@styled-system/css");
var helpers_1 = require("./helpers");
var imperfection_1 = require("./imperfection");
var mixins_1 = require("./mixins");
var polished_1 = require("./polished");
var styles_1 = require("./styles");
exports.inputTextTypes = [
    'date',
    'email',
    'file',
    'number',
    'password',
    'search',
    'tel',
    'text',
];
exports.appearanceStyles = {
    appearance: 'none',
};
exports.baseStyles = {
    boxSizing: 'border-box',
};
function colorStyles(props) {
    var dark = props.dark, invert = props.invert;
    return styled_components_1.css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    color: ", ";\n  "], ["\n    color: ", ";\n  "])), invert || dark ? helpers_1.getColor(props) : helpers_1.getTextColor(props));
}
exports.colorStyles = colorStyles;
function lineHeightStyles(props) {
    return helpers_1.getTheme(props, 'lineHeight');
}
exports.lineHeightStyles = lineHeightStyles;
function mutationStyles(options) {
    var _a = (options || {}).skipTheme, skipTheme = _a === void 0 ? false : _a;
    return function (props) {
        var _a = helpers_1.getMutation(props, skipTheme), complexity = _a.complexity, height = _a.height, mutation = _a.mutation, seed = _a.seed, width = _a.width;
        if (!mutation || props.type === 'color') {
            return styled_components_1.css(templateObject_2 || (templateObject_2 = __makeTemplateObject([""], [""])));
        }
        var shape = new imperfection_1.Imperfection(seed || '', width, height);
        var path = shape.getPath(mutation, complexity !== null && complexity !== void 0 ? complexity : 0, true);
        return styled_components_1.css(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n      -webkit-appearance: none;\n      -webkit-clip-path: polygon(", ");\n      border: 0;\n      clip-path: polygon(", ");\n      transition: clip-path 0.5s;\n    "], ["\n      -webkit-appearance: none;\n      -webkit-clip-path: polygon(", ");\n      border: 0;\n      clip-path: polygon(", ");\n      transition: clip-path 0.5s;\n    "])), path, path);
    };
}
exports.mutationStyles = mutationStyles;
function inputStyles(props) {
    var invert = props.invert, multiple = props.multiple, outline = props.outline, outlineColor = props.outlineColor, _a = props.outlineOffset, outlineOffset = _a === void 0 ? 1 : _a, outlineStyle = props.outlineStyle, outlineWidth = props.outlineWidth, type = props.type, valid = props.valid;
    var elementType = 'input';
    if (helpers_1.isDefined(multiple)) {
        elementType = 'select';
    }
    else if (!helpers_1.isDefined(type)) {
        elementType = 'textarea';
    }
    var _b = helpers_1.getTheme(props, elementType), backgroundColor = _b.backgroundColor, borderColor = _b.borderColor, checkedBgColor = _b.checkedBgColor, color = _b.color, disabledColor = _b.disabledColor, requiredColor = _b.requiredColor, validation = _b.validation;
    var primaryColor = helpers_1.getColor(props);
    var currentBgColor = backgroundColor;
    var currentColor = color;
    var currentBorderColor = borderColor;
    var multipleCheckedBgColor = checkedBgColor || helpers_1.getAccentColor(primaryColor, true);
    if (valid) {
        currentBorderColor = validation.valid;
    }
    else if (valid === false) {
        currentBorderColor = validation.invalid;
    }
    return styled_components_1.css(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n    ", ";\n\n    &:focus {\n      ", ";\n      outline-color: ", ";\n      ", ";\n      ", ";\n      ", ";\n    }\n\n    &[multiple] {\n      > option {\n        &:not(:checked) {\n          background: ", ";\n        }\n\n        &:checked {\n          background: ", ";\n          font-weight: bold;\n        }\n      }\n    }\n\n    &:disabled {\n      background-color: ", ";\n      border-color: ", ";\n      color: ", ";\n\n      &:not([multiple]) > option {\n        background-color: ", ";\n\n        &:checked {\n          opacity: 0.7;\n        }\n      }\n    }\n\n    &:required:not(:valid) {\n      border-color: ", ";\n      ", ";\n    }\n\n    ", "\n  "], ["\n    ", ";\n\n    &:focus {\n      ", ";\n      outline-color: ", ";\n      ", ";\n      ", ";\n      ", ";\n    }\n\n    &[multiple] {\n      > option {\n        &:not(:checked) {\n          background: ", ";\n        }\n\n        &:checked {\n          background: ", ";\n          font-weight: bold;\n        }\n      }\n    }\n\n    &:disabled {\n      background-color: ", ";\n      border-color: ", ";\n      color: ", ";\n\n      &:not([multiple]) > option {\n        background-color: ", ";\n\n        &:checked {\n          opacity: 0.7;\n        }\n      }\n    }\n\n    &:required:not(:valid) {\n      border-color: ", ";\n      ", ";\n    }\n\n    ",
        "\n  "])), mixins_1.placeholder("color: " + polished_1.lighten(0.5, currentColor) + ";"), outline ? "outline: " + outline : null, outlineColor || (invert ? currentBorderColor : color), outlineOffset ? "outline-offset: " + helpers_1.px(outlineOffset) : null, outlineStyle ? "outline-style: " + outlineStyle : null, outlineWidth ? "outline-width: " + helpers_1.px(outlineWidth) : null, currentBgColor + " linear-gradient(0deg, " + currentBgColor + " 0%, " + currentBgColor + " 100%)", multipleCheckedBgColor + " linear-gradient(0deg, " + multipleCheckedBgColor + " 0%, " + multipleCheckedBgColor + " 100%)", disabledColor, disabledColor, polished_1.lighten(0.3, currentColor), disabledColor, requiredColor, mixins_1.placeholder("color: " + polished_1.lighten(0.1, polished_1.desaturate(0.2, requiredColor)) + ";"), type &&
        "\n      &:read-only {\n        background-color: " + polished_1.darken(0.02, backgroundColor) + ";\n        color: " + polished_1.lighten(0.3, currentColor) + ";\n        cursor: not-allowed;\n      }\n    ");
}
exports.inputStyles = inputStyles;
function sx(props) {
    var mergedProps = helpers_1.getProps(props);
    return __assign(__assign({}, css_1.default(props.css)(mergedProps)), helpers_1.responsive(props.responsive)(mergedProps)());
}
exports.sx = sx;
function system(props) {
    return styles_1.styleSystem(helpers_1.getProps(props));
}
exports.system = system;
function variantStyles(props) {
    var dark = props.dark, invert = props.invert, transparent = props.transparent;
    var darkColor = helpers_1.getTheme(props).darkColor;
    var themeColor = helpers_1.getColor(props);
    var backgroundColor = invert ? '#fff' : themeColor;
    var color = invert ? themeColor : helpers_1.getTextColor(props);
    if (transparent) {
        return styled_components_1.css(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n      background-color: transparent;\n      border: 0;\n      color: ", ";\n    "], ["\n      background-color: transparent;\n      border: 0;\n      color: ", ";\n    "])), color);
    }
    return styled_components_1.css(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n    background-color: ", ";\n    border: ", ";\n    color: ", ";\n  "], ["\n    background-color: ", ";\n    border: ", ";\n    color: ", ";\n  "])), dark ? darkColor : backgroundColor, "1px solid " + (dark ? darkColor : themeColor), dark ? helpers_1.getDarkColor(props) : color);
}
exports.variantStyles = variantStyles;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6;
//# sourceMappingURL=system.js.map