var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import styled, { css } from 'styled-components';
import { getColor, getTheme, px } from './utils/helpers';
import { baseStyles, appearanceStyles, mutationStyles, sx, system, variantStyles, } from './utils/system';
import { StyledBadge } from './Badge';
import MutationWrapper from './MutationWrapper';
export var StyledButton = styled('button')(function (props) {
    var block = props.block, busy = props.busy, invert = props.invert, _a = props.size, size = _a === void 0 ? 'md' : _a;
    var _b = getTheme(props, 'button'), borderRadius = _b.borderRadius, disabledOpacity = _b.disabledOpacity, fontSize = _b.fontSize, lineHeight = _b.lineHeight, loader = _b.loader, padding = _b.padding;
    return css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n      ", ";\n      ", ";\n      ", ";\n      ", ";\n      align-items: center;\n      border-radius: ", ";\n      box-shadow: none;\n      cursor: pointer;\n      display: inline-flex;\n      font-family: inherit;\n      font-size: ", ";\n      line-height: ", ";\n      padding: ", " ", ";\n      text-decoration: none;\n      width: ", ";\n\n      &:disabled {\n        opacity: ", ";\n        pointer-events: none;\n      }\n\n      &:focus {\n        outline-color: ", ";\n      }\n\n      ", " {\n        margin-left: 5px;\n      }\n    "], ["\n      ", ";\n      ", ";\n      ", ";\n      ", ";\n      align-items: center;\n      border-radius: ", ";\n      box-shadow: none;\n      cursor: pointer;\n      display: inline-flex;\n      font-family: inherit;\n      font-size: ", ";\n      line-height: ", ";\n      padding: ", " ", ";\n      text-decoration: none;\n      width: ", ";\n\n      &:disabled {\n        opacity: ", ";\n        pointer-events: none;\n      }\n\n      &:focus {\n        outline-color: ", ";\n      }\n\n      ", " {\n        margin-left: 5px;\n      }\n    "])), baseStyles, appearanceStyles, variantStyles, busy ? loader(invert ? '#ccc' : '#fff') : '', px(borderRadius[size]), px(fontSize[size]), lineHeight, px(padding[size][0]), px(padding[size][1]), block ? '100%' : 'auto', disabledOpacity, getColor, StyledBadge);
}, mutationStyles(), sx, system);
export var Button = React.forwardRef(function (props, ref) {
    var block = props.block, invert = props.invert;
    var button = React.createElement(StyledButton, __assign({ ref: ref }, props));
    if (invert) {
        return (React.createElement(MutationWrapper, __assign({ display: block ? 'block' : 'inline-flex' }, props), button));
    }
    return button;
});
Button.defaultProps = {
    block: false,
    busy: false,
    dark: false,
    disabled: false,
    invert: false,
    size: 'md',
    type: 'button',
    variant: 'primary',
};
var templateObject_1;
//# sourceMappingURL=Button.js.map