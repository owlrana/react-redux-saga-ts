var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import styled, { css } from 'styled-components';
import { getTheme, px } from './utils/helpers';
import { baseStyles, appearanceStyles, inputStyles, mutationStyles, sx, system, } from './utils/system';
import MutationWrapper from './MutationWrapper';
export var StyledTextarea = styled('textarea').attrs(function (_a) {
    var id = _a.id;
    return ({
        id: id,
    });
})(function (props) {
    var _a = getTheme(props, 'textarea'), backgroundColor = _a.backgroundColor, borderColor = _a.borderColor, borderRadius = _a.borderRadius, borderWidth = _a.borderWidth, color = _a.color, fontSize = _a.fontSize, lineHeight = _a.lineHeight, padding = _a.padding, validation = _a.validation;
    var _b = props.size, size = _b === void 0 ? 'md' : _b, valid = props.valid;
    var currentBorderColor = borderColor;
    if (valid) {
        currentBorderColor = validation.valid;
    }
    else if (valid === false) {
        currentBorderColor = validation.invalid;
    }
    return css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n      ", ";\n      ", ";\n      background-color: ", ";\n      border: ", ";\n      border-radius: ", ";\n      color: ", ";\n      display: block;\n      font-family: inherit;\n      font-size: ", ";\n      line-height: ", ";\n      margin: 0;\n      padding: ", ";\n      width: 100%;\n    "], ["\n      ", ";\n      ", ";\n      background-color: ", ";\n      border: ", ";\n      border-radius: ", ";\n      color: ", ";\n      display: block;\n      font-family: inherit;\n      font-size: ", ";\n      line-height: ", ";\n      margin: 0;\n      padding: ", ";\n      width: 100%;\n    "])), baseStyles, appearanceStyles, backgroundColor, px(borderWidth) + " solid " + currentBorderColor, px(borderRadius), color, px(fontSize[size]), lineHeight, px(padding[size]));
}, mutationStyles(), inputStyles, sx, system);
export var Textarea = React.forwardRef(function (props, ref) { return (React.createElement(MutationWrapper, __assign({}, props),
    React.createElement(StyledTextarea, __assign({ ref: ref }, props)))); });
Textarea.defaultProps = {
    rows: 3,
    size: 'md',
};
var templateObject_1;
//# sourceMappingURL=Textarea.js.map