export declare type ButtonTypes = 'button' | 'submit' | 'reset';
export declare type InputTypes = 'color' | 'date' | 'email' | 'file' | 'hidden' | 'number' | 'password' | 'search' | 'tel' | 'text';
export declare type NumberOrString = number | string;
export declare type Sizes = 'sm' | 'md' | 'lg';
export declare type SizesAll = 'xs' | 'sm' | 'md' | 'lg' | 'xl';
export declare type MutationRate = number;
export declare type MutationHeight = number;
export declare type MutationWidth = number;
export interface MutationProps {
    /** The number of points */
    complexity?: number;
    /** Mutate the shape */
    mutation?: number | [MutationRate, MutationWidth, MutationHeight];
    seed?: NumberOrString;
}
export interface MutationResponse {
    /** Mutate the shape */
    borderColor?: string;
    borderWidth?: NumberOrString;
    complexity?: number;
    height?: number;
    mutation?: number;
    seed?: NumberOrString;
    width?: number;
}
export interface GenericObject {
    [key: string]: any;
}
export declare type RecursivePartial<T> = {
    [K in keyof T]?: T[K] extends Array<infer R> ? Array<RecursivePartial<R>> : RecursivePartial<T[K]>;
};
