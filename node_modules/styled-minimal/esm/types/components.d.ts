import * as React from 'react';
import { ButtonTypes, InputTypes, MutationHeight, MutationRate, MutationWidth, NumberOrString, Sizes, SizesAll } from './common';
import { StyleProps } from './system';
import { Variants } from './theme';
export declare type ComponentProps<T, P> = P & Omit<React.HTMLProps<T>, 'size' | 'ref' | keyof P>;
export interface WithDark {
    /** Dark background with the variant as text color */
    dark?: boolean;
}
export interface WithFrame {
    /** Add a border around the element */
    frame?: boolean;
}
export interface WithInline {
    /** Display as an inline element */
    inline?: boolean;
}
export interface WithInvert {
    /** Use variant as border and text color */
    invert?: boolean;
}
export interface WithMutation {
    /** The number of points for mutation */
    complexity?: number;
    /** Mutate the component shape. */
    mutation?: number | [MutationRate, MutationWidth, MutationHeight];
    /** The seed used for mutation */
    seed?: NumberOrString;
}
export interface WithSizes {
    /** Component size */
    size?: Sizes;
}
export interface WithSizesAll {
    /** Component size */
    size?: SizesAll;
}
export interface WithTransparent {
    /** Whether this component is transparent. */
    transparent?: boolean;
}
export interface WithVariant {
    /** Component color */
    variant?: Variants;
}
/**
 * Alert
 */
export interface AlertKnownProps extends StyleProps, WithDark, WithInvert, WithMutation, WithVariant {
    children: React.ReactNode;
}
export declare type AlertProps = ComponentProps<HTMLDivElement, AlertKnownProps>;
/**
 * Badge
 */
export interface BadgeKnownProps extends StyleProps, WithDark, WithInvert, WithVariant {
    children: React.ReactNode;
    /** Display as a dot without text */
    dot?: boolean;
}
export declare type BadgeProps = ComponentProps<HTMLSpanElement, BadgeKnownProps>;
/**
 * Box
 */
export interface BoxProps extends WithMutation, ComponentProps<HTMLDivElement, StyleProps> {
}
/**
 * Button
 */
export interface ButtonKnownProps extends StyleProps, WithDark, WithInvert, WithMutation, WithSizesAll, WithTransparent, WithVariant {
    /** Take up the full width of its container. */
    block?: boolean;
    /** Add an animation to the background */
    busy?: boolean;
    children: React.ReactNode;
    type?: ButtonTypes;
}
export declare type ButtonProps = ComponentProps<HTMLButtonElement, ButtonKnownProps>;
/**
 * ButtonGroup
 */
export interface ButtonGroupKnownProps extends StyleProps, WithSizesAll, WithVariant {
    children: React.ReactNode;
}
export declare type ButtonGroupProps = ComponentProps<HTMLDivElement, ButtonGroupKnownProps>;
/**
 * Checkbox
 */
export interface CheckboxKnownProps extends StyleProps, WithDark, WithInline, WithInvert, WithSizes, WithVariant {
    checked?: boolean;
    defaultChecked?: boolean;
    disabled?: boolean;
    label: React.ReactNode;
}
export declare type CheckboxProps = ComponentProps<HTMLInputElement, CheckboxKnownProps>;
/**
 * Circle
 */
export interface CircleKnownProps extends StyleProps, WithInvert, WithVariant {
    animate?: boolean;
    limit?: number;
    mutation?: number;
    randomize?: boolean;
    size?: number;
    speed?: number;
    stroke?: number;
}
export declare type CircleProps = ComponentProps<HTMLDivElement, CircleKnownProps>;
/**
 * Code
 */
export interface CodeKnownProps extends StyleProps {
    children: React.ReactNode;
}
export declare type CodeProps = ComponentProps<HTMLElement, CodeKnownProps>;
/**
 * Code Block
 */
export interface CodeBlockKnownProps extends StyleProps {
    children: React.ReactNode;
}
export declare type CodeBlockProps = ComponentProps<HTMLPreElement, CodeBlockKnownProps>;
/**
 * Container
 */
export interface ContainerKnownProps extends StyleProps {
    children: React.ReactNode;
    fullScreen?: boolean;
    ySpacing?: boolean;
}
export declare type ContainerProps = ComponentProps<HTMLDivElement, ContainerKnownProps>;
/**
 * Embed
 */
export interface EmbedKnownProps extends StyleProps {
    children: string;
    /** The height of the video. Defaults to 9/16 (for a 16:9 aspect ratio) */
    ratio?: number;
}
export declare type EmbedProps = ComponentProps<HTMLDivElement, EmbedKnownProps>;
/**
 * Fieldset
 */
export interface FieldsetKnownProps extends StyleProps {
    children: React.ReactNode;
    label: React.ReactNode;
}
export declare type FieldsetProps = ComponentProps<HTMLFieldSetElement, FieldsetKnownProps>;
export interface FlexProps extends WithMutation, ComponentProps<HTMLDivElement, StyleProps> {
    children: React.ReactNode;
}
/**
 * Form
 */
export interface FormKnownProps extends StyleProps, WithFrame, WithMutation {
    children: React.ReactNode;
}
export declare type FormProps = ComponentProps<HTMLFormElement, FormKnownProps>;
/**
 * FormGroup
 */
export interface FormGroupKnownProps extends StyleProps, WithFrame, WithInline, WithMutation {
    children: React.ReactNode;
    label: React.ReactNode;
    labelId?: string;
    labelInfo?: React.ReactNode;
    labelStyles?: StyleProps;
    helperText?: React.ReactNode;
}
export declare type FormGroupProps = ComponentProps<HTMLDivElement, FormGroupKnownProps>;
export declare type GridProps = ComponentProps<HTMLDivElement, StyleProps>;
/**
 * Group
 */
export interface GroupKnownProps extends StyleProps {
    children: React.ReactNode;
    gap?: NumberOrString;
}
export declare type GroupProps = ComponentProps<HTMLDivElement, GroupKnownProps>;
/**
 * Heading
 */
export interface HeadingKnownProps extends StyleProps {
    as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';
    children: React.ReactNode;
    gutter?: boolean;
    level?: 1 | 2 | 3 | 4 | 5 | 6;
}
export declare type HeadingProps = ComponentProps<HTMLHeadingElement, HeadingKnownProps>;
/**
 * Image
 */
export interface ImageKnownProps extends StyleProps {
    alt: string;
    src: string;
}
export declare type ImageProps = ComponentProps<HTMLImageElement, ImageKnownProps>;
/**
 * Input
 */
export interface InputKnownProps extends StyleProps, WithMutation, WithSizes {
    label?: React.ReactNode;
    type?: InputTypes;
    valid?: boolean;
}
export declare type InputProps = ComponentProps<HTMLInputElement, InputKnownProps>;
/**
 * Label
 */
export interface LabelKnownProps extends StyleProps, WithInline {
    children: React.ReactNode;
    labelId?: string;
    labelInfo?: React.ReactNode;
}
export declare type LabelProps = ComponentProps<HTMLLabelElement, LabelKnownProps>;
/**
 * Legend
 */
export interface LegendKnownProps extends StyleProps {
    children: React.ReactNode;
}
export declare type LegendProps = ComponentProps<HTMLLegendElement, LegendKnownProps>;
/**
 * Link
 */
export interface LinkKnownProps extends StyleProps, WithVariant {
    children: React.ReactNode;
    href: string;
}
export declare type LinkProps = ComponentProps<HTMLAnchorElement, LinkKnownProps>;
/**
 * List
 */
export interface ListsKnownProps extends StyleProps, WithFrame, WithInline, WithSizes {
    children: React.ReactNode;
}
export interface ULProps extends ComponentProps<HTMLUListElement, ListsKnownProps> {
    styleType?: 'disc' | 'circle' | 'square' | 'decimal' | 'lower-alpha' | 'none' | string;
}
export declare type OLProps = ComponentProps<HTMLOListElement, ListsKnownProps>;
export declare type DLProps = ComponentProps<HTMLDListElement, ListsKnownProps>;
/**
 * Loader
 */
export interface LoaderKnownProps extends StyleProps, WithVariant {
    color?: string;
    delay?: number;
    opacity?: number;
    size?: NumberOrString;
    speed?: number;
}
export declare type LoaderProps = ComponentProps<HTMLDivElement, LoaderKnownProps>;
/**
 * Paragraph
 */
export interface ParagraphKnownProps extends StyleProps {
    children: React.ReactNode;
}
export declare type ParagraphProps = ComponentProps<HTMLParagraphElement, ParagraphKnownProps>;
/**
 * Radio
 */
export interface RadioKnownProps extends StyleProps, WithDark, WithInline, WithInvert, WithSizes, WithVariant {
    disabled?: boolean;
    label: React.ReactNode;
}
export declare type RadioProps = ComponentProps<HTMLInputElement, RadioKnownProps>;
/**
 * RadioGroup
 */
export interface RadioGroupOptions extends WithMutation, WithVariant {
    disabled?: boolean;
    label?: React.ReactNode;
    value: NumberOrString;
}
export interface RadioGroupKnownProps extends Omit<FormGroupKnownProps, 'children'>, RadioKnownProps {
    defaultValue?: NumberOrString;
    name: string;
    options: RadioGroupOptions[];
    onChange?: (value: NumberOrString) => void;
    value?: NumberOrString;
}
export declare type RadioGroupProps = ComponentProps<HTMLDivElement, RadioGroupKnownProps>;
/**
 * Select
 */
export interface SelectKnownProps extends StyleProps, WithMutation {
    children: React.ReactNode;
    size?: number;
    /** Component size (select already has an attribute size) */
    sizing?: Sizes;
    valid?: boolean;
}
export declare type SelectProps = ComponentProps<HTMLSelectElement, SelectKnownProps>;
/**
 * Switch
 */
export interface SwitchKnownProps extends StyleProps, WithSizesAll, WithVariant {
    /**  Initial status (uncontrolled mode) */
    defaultChecked?: boolean;
    /** Status (controlled mode) */
    checked?: boolean;
    disabled?: boolean;
    label?: React.ReactNode;
    name: string;
    onChange?: (value: boolean) => void;
}
export declare type SwitchProps = ComponentProps<HTMLInputElement, SwitchKnownProps>;
/**
 * Table
 */
export interface TableKnownProps extends StyleProps, WithDark, WithFrame, WithSizes {
    clean?: boolean;
    children: React.ReactNode;
    head?: 'normal' | 'light' | 'dark';
    striped?: boolean;
}
export declare type TableProps = ComponentProps<HTMLTableElement, TableKnownProps>;
/**
 * Text
 */
export interface TextKnownProps extends StyleProps {
    children: React.ReactNode;
    muted?: boolean;
}
export declare type TextProps = ComponentProps<HTMLSpanElement, TextKnownProps>;
/**
 * Textarea
 */
export interface TextareaKnownProps extends StyleProps, WithMutation, WithSizes {
    valid?: boolean;
}
export declare type TextareaProps = ComponentProps<HTMLTextAreaElement, TextareaKnownProps>;
