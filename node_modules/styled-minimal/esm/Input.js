var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import styled, { css } from 'styled-components';
import MutationWrapper from './MutationWrapper';
import { getColor, getDarkColor, getAccentColor, getTextColor, getTheme, px, } from './utils/helpers';
import { baseStyles, appearanceStyles, inputTextTypes, mutationStyles, inputStyles, sx, system, variantStyles, } from './utils/system';
export var StyledInput = styled('input')(function (props) {
    var _a = props.size, size = _a === void 0 ? 'md' : _a, _b = props.type, type = _b === void 0 ? 'text' : _b, valid = props.valid;
    var _c = getTheme(props, 'input'), backgroundColor = _c.backgroundColor, borderColor = _c.borderColor, borderRadius = _c.borderRadius, borderWidth = _c.borderWidth, color = _c.color, fontSize = _c.fontSize, height = _c.height, lineHeight = _c.lineHeight, padding = _c.padding, validation = _c.validation;
    var currentBorderColor = borderColor;
    if (valid) {
        currentBorderColor = validation.valid;
    }
    else if (valid === false) {
        currentBorderColor = validation.invalid;
    }
    return css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n      ", ";\n      ", ";\n      background-color: ", ";\n      border: ", " solid ", ";\n      border-radius: ", ";\n      color: ", ";\n      display: block;\n      font-family: inherit;\n      font-size: ", ";\n      ", ";\n      line-height: ", ";\n      padding: ", ";\n      ", ";\n\n      &[type='file'] {\n        font-size: ", ";\n        padding: ", ";\n      }\n    "], ["\n      ", ";\n      ", ";\n      background-color: ", ";\n      border: ", " solid ", ";\n      border-radius: ", ";\n      color: ", ";\n      display: block;\n      font-family: inherit;\n      font-size: ", ";\n      ", ";\n      line-height: ", ";\n      padding: ", ";\n      ", ";\n\n      &[type='file'] {\n        font-size: ", ";\n        padding: ", ";\n      }\n    "])), baseStyles, appearanceStyles, backgroundColor, px(borderWidth), currentBorderColor, px(borderRadius), color, px(fontSize[size]), inputTextTypes.includes(type) ? "height: " + px(height[size]) : '', lineHeight, inputTextTypes.includes(type) ? px(padding[size]) : 0, !['color'].includes(type) ? 'width: 100%;' : '', px(fontSize[size] - 1), px(padding[size] - 1));
}, mutationStyles(), inputStyles, sx, system);
var StyledCheckboxRadioInput = styled('input')(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  left: 0;\n  opacity: 0;\n  position: absolute;\n  top: 0;\n  z-index: -1;\n"], ["\n  left: 0;\n  opacity: 0;\n  position: absolute;\n  top: 0;\n  z-index: -1;\n"])));
var StyledText = styled('span')(function (props) {
    var size = props.size, _a = props.category, category = _a === void 0 ? 'checkbox' : _a;
    var sizes = getTheme(props, category).sizes;
    return css(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n    font-size: ", ";\n  "], ["\n    font-size: ", ";\n  "])), px(sizes[size]));
});
var StyledElement = styled('span')(function (props) {
    var dark = props.dark, invert = props.invert, size = props.size, _a = props.category, category = _a === void 0 ? 'checkbox' : _a;
    var _b = getTheme(props, category), backgroundColor = _b.backgroundColor, borderColor = _b.borderColor, borderRadius = _b.borderRadius, sizes = _b.sizes;
    var color = getColor(props);
    var currentSize = sizes[size];
    var after;
    var accentColor = dark ? getDarkColor(props) : getTextColor(props);
    if (invert && !dark) {
        accentColor = color;
    }
    if (category === 'checkbox') {
        after = css(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n        border-bottom: 2px solid ", ";\n        border-left: 2px solid ", ";\n        height: 4px;\n        transform: rotate(-45deg) translateY(-100%);\n        width: 7px;\n      "], ["\n        border-bottom: 2px solid ", ";\n        border-left: 2px solid ", ";\n        height: 4px;\n        transform: rotate(-45deg) translateY(-100%);\n        width: 7px;\n      "])), accentColor, accentColor);
    }
    else {
        after = css(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n        background-color: ", ";\n        border-radius: 50%;\n        height: 6px;\n        transform: translate(-50%, -50%);\n        width: 6px;\n      "], ["\n        background-color: ", ";\n        border-radius: 50%;\n        height: 6px;\n        transform: translate(-50%, -50%);\n        width: 6px;\n      "])), accentColor);
    }
    return css(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n      ", ";\n      border-radius: ", ";\n      ", ";\n      display: inline-flex;\n      flex-shrink: 0;\n      height: ", ";\n      margin-right: 6px;\n      position: relative;\n      transition: background-color 0.2s, border-color 0.2s;\n      width: ", ";\n\n      &:after {\n        content: '';\n        display: none;\n        position: absolute;\n        left: 50%;\n        top: 50%;\n        ", ";\n      }\n\n      input:checked ~ & {\n        &:after {\n          display: inline-block;\n        }\n      }\n\n      input:disabled ~ & {\n        opacity: 0.6;\n      }\n\n      input:not(:checked) ~ & {\n        background-color: ", ";\n        border-color: ", ";\n      }\n\n      input:not(:checked):disabled ~ & {\n        background-color: ", ";\n      }\n    "], ["\n      ", ";\n      border-radius: ", ";\n      ", ";\n      display: inline-flex;\n      flex-shrink: 0;\n      height: ", ";\n      margin-right: 6px;\n      position: relative;\n      transition: background-color 0.2s, border-color 0.2s;\n      width: ", ";\n\n      &:after {\n        content: '';\n        display: none;\n        position: absolute;\n        left: 50%;\n        top: 50%;\n        ", ";\n      }\n\n      input:checked ~ & {\n        &:after {\n          display: inline-block;\n        }\n      }\n\n      input:disabled ~ & {\n        opacity: 0.6;\n      }\n\n      input:not(:checked) ~ & {\n        background-color: ", ";\n        border-color: ", ";\n      }\n\n      input:not(:checked):disabled ~ & {\n        background-color: ", ";\n      }\n    "])), baseStyles, px(borderRadius), variantStyles, px(currentSize), px(currentSize), after, backgroundColor, borderColor, borderColor);
}, sx, system);
var StyledLabel = styled('label')(function (props) {
    var disabled = props.disabled, inline = props.inline, _a = props.category, category = _a === void 0 ? 'checkbox' : _a;
    var color = getAccentColor(getColor(props));
    var borderColor = getTheme(props, category).borderColor;
    return css(templateObject_7 || (templateObject_7 = __makeTemplateObject(["\n    align-items: center;\n    cursor: ", ";\n    display: ", ";\n    margin-bottom: 8px;\n    position: relative;\n    margin-right: ", ";\n\n    &:focus,\n    &:hover {\n      ", " {\n        &:not(:checked) ~ ", " {\n          background-color: ", ";\n        }\n\n        &:not(:disabled):checked ~ ", " {\n          background-color: ", ";\n          border-color: ", ";\n        }\n      }\n    }\n  "], ["\n    align-items: center;\n    cursor: ", ";\n    display: ", ";\n    margin-bottom: 8px;\n    position: relative;\n    margin-right: ", ";\n\n    &:focus,\n    &:hover {\n      ", " {\n        &:not(:checked) ~ ", " {\n          background-color: ", ";\n        }\n\n        &:not(:disabled):checked ~ ", " {\n          background-color: ", ";\n          border-color: ", ";\n        }\n      }\n    }\n  "])), disabled ? 'default' : 'pointer', inline ? 'inline-flex' : 'flex', inline && '12px', StyledCheckboxRadioInput, StyledElement, borderColor, StyledElement, color, color);
});
export var Checkbox = React.forwardRef(function (props, ref) {
    var defaultChecked = props.defaultChecked, checked = props.checked, children = props.children, disabled = props.disabled, inline = props.inline, invert = props.invert, label = props.label, onChange = props.onChange, size = props.size, theme = props.theme, value = props.value, variant = props.variant, rest = __rest(props, ["defaultChecked", "checked", "children", "disabled", "inline", "invert", "label", "onChange", "size", "theme", "value", "variant"]);
    return (React.createElement(StyledLabel, { disabled: disabled, inline: inline, theme: theme, variant: variant },
        React.createElement(StyledCheckboxRadioInput, { checked: checked, "aria-checked": checked || defaultChecked, defaultChecked: defaultChecked, disabled: disabled, onChange: onChange, ref: ref, role: "checkbox", type: "checkbox", value: value }),
        React.createElement(StyledElement, __assign({ category: "checkbox", invert: invert, size: size, theme: theme, variant: variant }, rest)),
        React.createElement(StyledText, { category: "checkbox", size: size }, children || label)));
});
Checkbox.defaultProps = {
    dark: false,
    inline: false,
    invert: false,
    size: 'md',
    variant: 'primary',
};
/**
 * Use the RadioGroup component instead of this.
 * RadioGroup accepts an `options` prop that render this component in a group and is responsible for managing state and interactions.
 */
export var Radio = React.forwardRef(function (_a, ref) {
    var defaultChecked = _a.defaultChecked, checked = _a.checked, children = _a.children, disabled = _a.disabled, id = _a.id, inline = _a.inline, invert = _a.invert, label = _a.label, name = _a.name, onChange = _a.onChange, size = _a.size, theme = _a.theme, value = _a.value, variant = _a.variant, rest = __rest(_a, ["defaultChecked", "checked", "children", "disabled", "id", "inline", "invert", "label", "name", "onChange", "size", "theme", "value", "variant"]);
    return (React.createElement(StyledLabel, { disabled: disabled, inline: inline, theme: theme, category: "radio", variant: variant },
        React.createElement(StyledCheckboxRadioInput, { "aria-checked": !!(checked || defaultChecked), checked: checked, defaultChecked: defaultChecked, disabled: disabled, id: id, name: name, onChange: onChange, ref: ref, role: "radio", type: "radio", value: value }),
        React.createElement(StyledElement, __assign({ invert: invert, size: size, theme: theme, variant: variant }, rest, { category: "radio" })),
        React.createElement(StyledText, { size: size, category: "radio" }, children || label)));
});
Radio.defaultProps = {
    dark: false,
    inline: false,
    invert: false,
    size: 'md',
    variant: 'primary',
};
export var Input = React.forwardRef(function (props, ref) {
    var id = props.id, name = props.name, type = props.type;
    var input = React.createElement(StyledInput, __assign({ ref: ref }, props));
    if (type === 'color') {
        return input;
    }
    return (React.createElement(MutationWrapper, __assign({}, props),
        React.createElement(StyledInput, __assign({ ref: ref, id: id || name }, props))));
});
Input.defaultProps = {
    size: 'md',
    type: 'text',
};
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7;
//# sourceMappingURL=Input.js.map