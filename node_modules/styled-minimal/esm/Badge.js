var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import styled, { css } from 'styled-components';
import { getTheme, px } from './utils/helpers';
import { baseStyles, sx, system, variantStyles } from './utils/system';
export var StyledBadge = styled('sup')(function (props) {
    var dot = props.dot;
    var _a = getTheme(props, 'badge'), borderRadius = _a.borderRadius, fontSize = _a.fontSize, fontWeight = _a.fontWeight, lineHeight = _a.lineHeight, padding = _a.padding, size = _a.size, sizeDot = _a.sizeDot;
    return css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n      ", ";\n      ", ";\n      border-radius: ", ";\n      display: inline-flex;\n      font-size: ", ";\n      font-weight: ", ";\n      justify-content: center;\n      line-height: ", ";\n      height: ", ";\n      padding: ", ";\n      min-width: ", ";\n    "], ["\n      ", ";\n      ", ";\n      border-radius: ", ";\n      display: inline-flex;\n      font-size: ", ";\n      font-weight: ", ";\n      justify-content: center;\n      line-height: ", ";\n      height: ", ";\n      padding: ", ";\n      min-width: ", ";\n    "])), baseStyles, variantStyles, dot ? '100%' : px(borderRadius), dot ? 0 : px(fontSize), fontWeight, dot ? 0 : px(lineHeight), px(dot ? sizeDot : size), dot ? 0 : "0 " + px(padding), px(dot ? sizeDot : size));
}, sx, system);
export var Badge = React.forwardRef(function (props, ref) { return (React.createElement(StyledBadge, __assign({ ref: ref }, props))); });
Badge.defaultProps = {
    dark: false,
    dot: false,
    invert: false,
    variant: 'primary',
};
var templateObject_1;
//# sourceMappingURL=Badge.js.map