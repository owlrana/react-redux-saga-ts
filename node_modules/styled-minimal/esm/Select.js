var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import styled, { css } from 'styled-components';
import { getColor, getTheme, px } from './utils/helpers';
import { baseStyles, appearanceStyles, inputStyles, mutationStyles, sx, system, } from './utils/system';
import MutationWrapper from './MutationWrapper';
export var StyledSelect = styled('select')(function (props) {
    var multiple = props.multiple, _a = props.sizing, sizing = _a === void 0 ? 'md' : _a, valid = props.valid;
    var currentColor = getColor(props, { includeColor: true });
    var _b = getTheme(props, 'select'), backgroundColor = _b.backgroundColor, color = _b.color, borderColor = _b.borderColor, borderRadius = _b.borderRadius, borderWidth = _b.borderWidth, fontSize = _b.fontSize, height = _b.height, lineHeight = _b.lineHeight, padding = _b.padding, validation = _b.validation;
    var currentBgColor = backgroundColor;
    var currentBorderColor = borderColor;
    if (valid) {
        currentBorderColor = validation.valid;
    }
    else if (valid === false) {
        currentBorderColor = validation.invalid;
    }
    var iconColor = currentColor.replace('#', '%23');
    return css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n      ", ";\n      ", ";\n      background-image: url('", "');\n      background-repeat: no-repeat;\n      background-position: right 8px center;\n      background-color: ", ";\n      border: ", " solid ", ";\n      border-radius: ", ";\n      color: ", ";\n      display: block;\n      ", ";\n      font-family: inherit;\n      font-size: ", ";\n      line-height: ", ";\n      ", ";\n      white-space: nowrap;\n      width: 100%;\n\n      &[multiple] {\n        > option {\n          font-size: ", ";\n          line-height: ", ";\n          padding: ", ";\n        }\n      }\n    "], ["\n      ", ";\n      ", ";\n      background-image: url('", "');\n      background-repeat: no-repeat;\n      background-position: right 8px center;\n      background-color: ", ";\n      border: ", " solid ", ";\n      border-radius: ", ";\n      color: ", ";\n      display: block;\n      ", ";\n      font-family: inherit;\n      font-size: ", ";\n      line-height: ", ";\n      ", ";\n      white-space: nowrap;\n      width: 100%;\n\n      &[multiple] {\n        > option {\n          font-size: ", ";\n          line-height: ", ";\n          padding: ", ";\n        }\n      }\n    "])), baseStyles, appearanceStyles, "data:image/svg+xml,%3Csvg width=\"10px\" height=\"6px\" viewBox=\"0 0 10 6\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"%3E%3Cpolygon fill=\"" + iconColor + "\" points=\"-8.8817842e-16 0 10 0 4.9980424 6\"%3E%3C/polygon%3E%3C/svg%3E", currentBgColor, px(borderWidth), currentBorderColor, px(borderRadius), color, !multiple ? "height: " + px(height[sizing]) : '', px(fontSize[sizing]), lineHeight, !multiple ? "padding: " + px(padding[sizing]) + ";" : '', px(fontSize[sizing]), lineHeight, px(padding[sizing]));
}, mutationStyles(), inputStyles, sx, system);
export var Select = React.forwardRef(function (props, ref) { return (React.createElement(MutationWrapper, __assign({}, props),
    React.createElement(StyledSelect, __assign({ ref: ref }, props)))); });
Select.defaultProps = {
    multiple: false,
    sizing: 'md',
};
var templateObject_1;
//# sourceMappingURL=Select.js.map