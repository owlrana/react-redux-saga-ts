var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/*eslint-disable @typescript-eslint/no-use-before-define */
import * as deepmerge from 'deepmerge';
import css from '@styled-system/css';
import { darken, getLuminance, lighten, parseToRgb } from './polished';
import { styleSystem } from './styles';
import * as defaultTheme from './theme';
/**
 * Generate the media query
 */
export function createMediaQuery(size, mediaQueries) {
    if (isCSSUnit(size) || isNumericString(size)) {
        return "@media screen and (min-width: " + px(size) + ")";
    }
    return mediaQueries[size];
}
/**
 * Get color from theme
 */
export function getColor(props, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.base, base = _c === void 0 ? 'primary' : _c, _d = _b.includeColor, includeColor = _d === void 0 ? false : _d;
    var _e = props.variant, variant = _e === void 0 ? '' : _e;
    var colors = getTheme(props).colors;
    try {
        if (!variant && includeColor) {
            var color = getStyles(props).color;
            if (color) {
                return color;
            }
        }
        return colors[variant] || colors[base];
    }
    catch (error) {
        return colors.primary;
    }
}
export function getDarkColor(props) {
    var darkColor = getTheme(props).darkColor;
    var color = getColor(props);
    return getReadableColor(darkColor, color);
}
export function getAccentColor(color, lighter) {
    if (lighter === void 0) { lighter = false; }
    try {
        var luminance = getLuminance(color);
        var accent = darken(0.1, color);
        if (lighter) {
            accent = lighten(0.1, color);
            if (luminance < 0.1) {
                accent = lighten(0.2, color);
            }
            else if (luminance > 0.8) {
                accent = darken(0.05, color);
            }
            else if (luminance > 0.6) {
                accent = lighten(0.05, color);
            }
            return accent;
        }
        if (luminance < 0.05) {
            accent = lighten(0.1, color);
        }
        else if (luminance < 0.1) {
            accent = darken(0.1, color);
        }
        return accent;
    }
    catch (error) {
        /* istanbul ignore next */
        if (process.env.NODE_ENV === 'development') {
            console.error(error); //eslint-disable-line no-console
        }
        return color;
    }
}
export function getMediaQueries(breakpoints) {
    return Object.keys(breakpoints)
        .filter(function (d) { return Number.isNaN(parseInt(d, 10)); })
        .reduce(function (acc, d) {
        acc[d] = "@media screen and (min-width: " + px(breakpoints[d]) + ")";
        return acc;
    }, {});
}
export function getMutation(props, skipTheme) {
    var _a, _b, _c;
    var theme = getTheme(props);
    var styles = whitelist(getStyles(props), ['margin', 'border']);
    var complexity = (_a = props.complexity) !== null && _a !== void 0 ? _a : (!skipTheme ? theme.complexity : 0);
    var mutation = (_b = props.mutation) !== null && _b !== void 0 ? _b : (!skipTheme ? theme.mutation : 0);
    var seed = (_c = props.seed) !== null && _c !== void 0 ? _c : theme.seed;
    if (Array.isArray(mutation)) {
        var rate = mutation[0], width = mutation[1], height = mutation[2];
        return __assign({ complexity: complexity, height: height, mutation: rate, seed: seed, width: width }, styles);
    }
    return __assign({ complexity: complexity, mutation: mutation, seed: seed }, styles);
}
/**
 * Get percentage of positive numbers
 */
export function getPercentage(input, total) {
    return Number(parseFloat(String((100 * Math.max(0, input)) / Math.abs(total))).toFixed(2));
}
export function getProps(props) {
    if (props === void 0) { props = {}; }
    return __assign(__assign({}, props), { theme: mergeTheme(props.theme) });
}
export function getRandomInt(min, max, random) {
    if (min === void 0) { min = 1; }
    if (max === void 0) { max = 10; }
    if (random === void 0) { random = Math.random(); }
    return Math.floor(random * (max - min + 1) + min);
}
export function getReadableColor(baseColor, color) {
    var limit = 75;
    var colorDiff = Math.abs(getYiq(baseColor) - getYiq(color));
    var readableColor = color;
    if (colorDiff >= limit) {
        return readableColor;
    }
    while (colorDiff < limit) {
        readableColor = lighten(0.05, readableColor);
        colorDiff = Math.abs(getYiq(baseColor) - getYiq(readableColor));
    }
    return readableColor;
}
export function getStyles(props) {
    var theme = getTheme(props);
    return replaceShorthands(css(pick(props))({ theme: theme }));
}
export function getTextColor(props) {
    try {
        var colors = getTheme(props, 'colors');
        var currentColor = getColor(props);
        return getYiq(currentColor) > 135 ? colors.black : colors.white;
    }
    catch (error) {
        return '#000';
    }
}
/**
 * Get the merged theme
 */
export function getTheme(props, path) {
    var theme = mergeTheme((props === null || props === void 0 ? void 0 : props.theme) || {});
    return path ? theme[path] : theme;
}
/**
 * Color contrast
 */
export function getYiq(color) {
    try {
        var _a = parseToRgb(color), red = _a.red, green = _a.green, blue = _a.blue;
        return (red * 299 + green * 587 + blue * 114) / 1000;
    }
    catch (error) {
        return 0;
    }
}
/** Check if a variable is a boolean **/
export function isBoolean(value) {
    return typeof value === 'boolean';
}
export function isCSSUnit(value) {
    var units = ['em', 'px', 'rem', 'vh', 'vmax', 'vmin', 'vw'];
    var regex = new RegExp("\\d+(" + units.join('|') + ")$");
    return typeof value === 'string' && regex.test(value);
}
/** Check if a variable is defined **/
export function isDefined(value) {
    return typeof value !== 'undefined';
}
/** Check if a variable is a number **/
export function isNumber(value) {
    return typeof value === 'number';
}
export function isNumericString(value) {
    return isString(value) && value.length > 0 && !Number.isNaN(Number(value));
}
export function isString(value) {
    return typeof value === 'string';
}
export function limitNumber(num, min, max) {
    if (min === void 0) { min = 0; }
    if (max === void 0) { max = 100; }
    return Math.min(Math.max(num, min), max);
}
export function pick(props) {
    var regex = new RegExp("^(" + styleSystem.propNames.join('|') + ")$");
    var rest = {};
    for (var key in props) {
        if ({}.hasOwnProperty.call(props, key) && regex.test(key)) {
            rest[key] = props[key];
        }
    }
    return rest;
}
/** Get textual unit value */
export function px(value) {
    return isNumber(value) || isNumericString(value) ? value + "px" : value || '0px';
}
/**
 * Merge ThemeProvides's theme with the default theme
 */
export function mergeTheme(theme) {
    if (theme === void 0) { theme = {}; }
    return deepmerge(defaultTheme, theme, {
        arrayMerge: function (_dest, source) { return source; },
    });
}
export function parseNumericCSSProp(value) {
    if (isNumber(value)) {
        return value;
    }
    if (value.indexOf('px') > 0) {
        return parseInt(value, 10);
    }
    var baseFontSize = parseFloat(getComputedStyle(document.documentElement).fontSize);
    return parseFloat(value) * baseFontSize;
}
/**
 * SC Helper to generate responsive media queries1
 */
export function responsive(rules) {
    return function (props) {
        var breakpoints = getTheme(props).breakpoints;
        var entries = {};
        var mediaQueries = getMediaQueries(breakpoints);
        for (var rule in rules) {
            /* istanbul ignore else */
            if ({}.hasOwnProperty.call(rules, rule)) {
                var breakpoint = rule;
                var styles = css(replaceShorthands(rules[breakpoint]))(props);
                var query = createMediaQuery(breakpoint, mediaQueries);
                if (breakpoint === '_') {
                    Object.entries(styles).forEach(function (_a) {
                        var k = _a[0], v = _a[1];
                        entries[k] = v;
                    });
                }
                else if (query) {
                    entries[query] = styles;
                }
            }
        }
        return css(entries);
    };
}
export function replaceShorthands(styles) {
    return Object.entries(styles).reduce(function (acc, _a) {
        var k = _a[0], v = _a[1];
        switch (k) {
            case 'cl': {
                acc.color = v;
                break;
            }
            case 'h': {
                acc.height = v;
                break;
            }
            case 'w': {
                acc.width = v;
                break;
            }
            default: {
                acc[k] = v;
                break;
            }
        }
        return acc;
    }, {});
}
/**
 * Helper to get the corresponding item from the space scale
 */
export function spacer(value) {
    return function (props) {
        var space = getTheme(props).space;
        return px(space[value] || value);
    };
}
export function whitelist(input, entries) {
    return Object.entries(input).reduce(function (acc, _a) {
        var key = _a[0], value = _a[1];
        if (entries.some(function (e) { return key.startsWith(e); })) {
            acc[key] = value;
        }
        return acc;
    }, {});
}
//# sourceMappingURL=helpers.js.map