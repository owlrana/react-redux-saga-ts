var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import styled, { css } from 'styled-components';
import { getTheme, px } from './utils/helpers';
import { baseStyles, mutationStyles, sx, system } from './utils/system';
import { Flex, StyledFlex } from './Flex';
import { Label } from './Label';
import MutationWrapper from './MutationWrapper';
var margin = function (props) {
    var inlineMargin = getTheme(props, 'formGroup').inlineMargin;
    return px(inlineMargin);
};
export var StyledFormGroup = styled('div')(function (props) {
    var frame = props.frame, inline = props.inline;
    var _a = getTheme(props, 'formGroup'), borderColor = _a.borderColor, borderRadius = _a.borderRadius, marginBottom = _a.marginBottom, padding = _a.padding;
    var inlineStyles = function () {
        if (inline)
            return '';
        return "\n        label + label {\n          margin-top: 6px;\n         }\n      ";
    };
    return css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n      ", ";\n      background-color: #fff;\n      ", "\n      ", "\n      ", ";\n      ", ";\n      text-align: left;\n      ", ";\n      \n      ", ";\n  \n      ", " {\n        input,\n        label,\n        legend {\n          margin-bottom: 0;\n          margin-right: ", ";\n        }\n    \n        small {\n          margin-top: 0;\n        }\n      }\n    "], ["\n      ", ";\n      background-color: #fff;\n      ", "\n      ", "\n      ", ";\n      ", ";\n      text-align: left;\n      ", ";\n      \n      ", ";\n  \n      ", " {\n        input,\n        label,\n        legend {\n          margin-bottom: 0;\n          margin-right: ", ";\n        }\n    \n        small {\n          margin-top: 0;\n        }\n      }\n    "])), baseStyles, frame ? "border: 1px solid " + borderColor + ";" : '', frame ? "border-radius: " + px(borderRadius) + ";" : '', !frame ? "margin-bottom: " + px(marginBottom) : '', frame ? "padding: " + px(padding) + ";" : '', frame && mutationStyles(), inlineStyles, StyledFlex, margin);
}, sx, system);
var HelperText = styled('small')(function (props) {
    var _a = getTheme(props, 'formGroup'), helpColor = _a.helpColor, helpMarginTop = _a.helpMarginTop;
    return css(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n    color: ", ";\n    display: block;\n    font-size: 85%;\n    line-height: 1.3;\n    margin-top: ", ";\n  "], ["\n    color: ", ";\n    display: block;\n    font-size: 85%;\n    line-height: 1.3;\n    margin-top: ", ";\n  "])), helpColor, px(helpMarginTop));
});
export var FormGroup = React.forwardRef(function (props, ref) {
    var children = props.children, helperText = props.helperText, inline = props.inline, label = props.label, labelId = props.labelId, labelInfo = props.labelInfo, labelStyles = props.labelStyles, rest = __rest(props, ["children", "helperText", "inline", "label", "labelId", "labelInfo", "labelStyles"]);
    var marginBottom = getTheme(props, 'formGroup').marginBottom;
    var helpComponent = helperText && React.createElement(HelperText, null, helperText);
    var content = (React.createElement(React.Fragment, null,
        React.createElement(Label, __assign({}, labelStyles, { labelId: labelId, labelInfo: labelInfo }), label),
        children,
        helpComponent));
    if (inline) {
        content = React.createElement(Flex, { alignItems: "center" }, content);
    }
    var formGroup = (React.createElement(StyledFormGroup, __assign({ ref: ref, inline: inline }, rest), content));
    if (props.frame) {
        return (React.createElement(MutationWrapper, __assign({ mb: marginBottom }, props), formGroup));
    }
    return formGroup;
});
FormGroup.defaultProps = {
    frame: false,
    inline: false,
};
var templateObject_1, templateObject_2;
//# sourceMappingURL=FormGroup.js.map