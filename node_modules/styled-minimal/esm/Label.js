var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import styled, { css } from 'styled-components';
import { getTheme, px } from './utils/helpers';
import { baseStyles, lineHeightStyles, sx, system } from './utils/system';
import { StyledText, Text } from './Text';
export var StyledLabel = styled('label')(function (props) {
    var inline = props.inline;
    var _a = getTheme(props, 'label'), color = _a.color, fontWeight = _a.fontWeight, inlineFontSize = _a.inlineFontSize, marginBottom = _a.marginBottom;
    return css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n      ", ";\n      align-items: center;\n      color: ", ";\n      cursor: pointer;\n      display: flex;\n      font-family: inherit;\n      ", ";\n      font-weight: ", ";\n      line-height: ", ";\n      ", ";\n      white-space: nowrap;\n\n      ", " {\n        margin-left: 6px;\n      }\n    "], ["\n      ", ";\n      align-items: center;\n      color: ", ";\n      cursor: pointer;\n      display: flex;\n      font-family: inherit;\n      ", ";\n      font-weight: ", ";\n      line-height: ", ";\n      ", ";\n      white-space: nowrap;\n\n      ", " {\n        margin-left: 6px;\n      }\n    "])), baseStyles, color, inline ? "font-size: " + px(inlineFontSize) : '', fontWeight, lineHeightStyles, !inline ? "margin-bottom: " + px(marginBottom) : '', StyledText);
}, sx, system);
export var Label = React.forwardRef(function (props, ref) {
    var children = props.children, labelId = props.labelId, labelInfo = props.labelInfo;
    return (React.createElement(StyledLabel, __assign({ ref: ref }, props, { htmlFor: labelId }),
        children,
        !!labelInfo && React.createElement(Text, { muted: true }, labelInfo)));
});
Label.defaultProps = {
    inline: false,
};
var templateObject_1;
//# sourceMappingURL=Label.js.map