var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { ThemeConsumer } from 'styled-components';
import { getMutation, getTheme } from './utils/helpers';
import { Box } from './Box';
function MutationWrapper(props) {
    var children = props.children, display = props.display, variant = props.variant;
    return (React.createElement(ThemeConsumer, null, function (theme) {
        var _a = getMutation(__assign(__assign({}, props), { theme: theme }), props.skipTheme), borderColor = _a.borderColor, borderWidth = _a.borderWidth, complexity = _a.complexity, height = _a.height, mutation = _a.mutation, seed = _a.seed, width = _a.width, rest = __rest(_a, ["borderColor", "borderWidth", "complexity", "height", "mutation", "seed", "width"]);
        var themeBorderColor = getTheme(theme).borderColor;
        if (mutation) {
            return (React.createElement(Box, { bg: variant || borderColor || themeBorderColor, display: display, p: borderWidth || '1px', css: rest, mutation: mutation, complexity: complexity, seed: seed }, children));
        }
        return children;
    }));
}
export default MutationWrapper;
//# sourceMappingURL=MutationWrapper.js.map