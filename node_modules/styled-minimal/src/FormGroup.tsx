import * as React from 'react';
import styled, { css } from 'styled-components';

import { getTheme, px } from './utils/helpers';
import { baseStyles, mutationStyles, sx, system } from './utils/system';

import { FormGroupProps } from './types';

import { Flex, StyledFlex } from './Flex';
import { Label } from './Label';
import MutationWrapper from './MutationWrapper';

const margin = (props: any) => {
  const { inlineMargin } = getTheme(props, 'formGroup');

  return px(inlineMargin);
};

export const StyledFormGroup = styled('div')<Partial<FormGroupProps>>(
  (props) => {
    const { frame, inline } = props;
    const { borderColor, borderRadius, marginBottom, padding } = getTheme(props, 'formGroup');
    const inlineStyles = () => {
      if (inline) return '';

      return `
        label + label {
          margin-top: 6px;
         }
      `;
    };

    return css`
      ${baseStyles};
      background-color: #fff;
      ${frame ? `border: 1px solid ${borderColor};` : ''}
      ${frame ? `border-radius: ${px(borderRadius)};` : ''}
      ${!frame ? `margin-bottom: ${px(marginBottom)}` : ''};
      ${frame ? `padding: ${px(padding)};` : ''};
      text-align: left;
      ${frame && mutationStyles()};
      
      ${inlineStyles};
  
      ${StyledFlex} {
        input,
        label,
        legend {
          margin-bottom: 0;
          margin-right: ${margin};
        }
    
        small {
          margin-top: 0;
        }
      }
    `;
  },
  sx,
  system,
);

const HelperText = styled('small')<Partial<FormGroupProps>>((props) => {
  const { helpColor, helpMarginTop } = getTheme(props, 'formGroup');

  return css`
    color: ${helpColor};
    display: block;
    font-size: 85%;
    line-height: 1.3;
    margin-top: ${px(helpMarginTop)};
  `;
});

export const FormGroup = React.forwardRef<HTMLDivElement, FormGroupProps>((props, ref) => {
  const { children, helperText, inline, label, labelId, labelInfo, labelStyles, ...rest } = props;
  const { marginBottom } = getTheme(props, 'formGroup');
  const helpComponent = helperText && <HelperText>{helperText}</HelperText>;

  let content = (
    <React.Fragment>
      <Label {...labelStyles} labelId={labelId} labelInfo={labelInfo}>
        {label}
      </Label>
      {children}
      {helpComponent}
    </React.Fragment>
  );

  if (inline) {
    content = <Flex alignItems="center">{content}</Flex>;
  }

  const formGroup = (
    <StyledFormGroup ref={ref} inline={inline} {...rest}>
      {content}
    </StyledFormGroup>
  );

  if (props.frame) {
    return (
      <MutationWrapper mb={marginBottom} {...props}>
        {formGroup}
      </MutationWrapper>
    );
  }

  return formGroup;
});

FormGroup.defaultProps = {
  frame: false,
  inline: false,
};
