import * as React from 'react';
import styled, { css } from 'styled-components';

import { getColor, px } from './utils/helpers';
import { generateCircle } from './utils/imperfection';
import { baseStyles, sx, system } from './utils/system';

import { CircleProps } from './types';

export const StyledSVGWrapper = styled('div')<CircleProps>(
  () => css`
    align-items: center;
    display: flex;
    justify-content: center;
    position: relative;
  `,
  sx,
  system,
);

export const StyledSVG = styled('svg')`
  left: 50%;
  margin-bottom: 20px;
  overflow: visible;
  position: absolute;
  top: 50%;
  transform: translate(-50%, -50%);
  z-index: -1;
`;

export const StyledPath = styled('path')<CircleProps>((props) => {
  const { invert, stroke } = props;
  const color = getColor(props);

  return css`
    ${baseStyles};
    fill: ${invert ? 'none' : color};
    stroke: ${invert ? color : 'none'};
    stroke-width: ${invert ? px(stroke!) : 0};
    transition: d 0.2s;
  `;
});

export const Circle = React.forwardRef<React.SVGProps<SVGSVGElement>, CircleProps>(
  (props: CircleProps, ref) => {
    const { animate, children, limit, mutation, randomize, size, speed, variant, ...rest } = props;
    const [animation, setAnimation] = React.useState({
      amount: 0,
      direction: 'forward',
    });
    const circle = React.useRef<string>();
    const interval = React.useRef<number>();

    if (!animate) {
      circle.current = generateCircle(mutation, randomize);
    }

    React.useEffect(() => {
      const { amount, direction } = animation;

      if (animate) {
        interval.current = window.setInterval(() => {
          circle.current = generateCircle(amount, randomize);

          let nextDirection = amount + 1 > limit! ? 'backward' : direction;

          if (amount <= -limit!) {
            nextDirection = 'forward';
          }

          setAnimation({
            amount: amount + (nextDirection === 'forward' ? 1 : -1),
            direction: nextDirection,
          });
        }, speed);
      }

      return () => {
        clearInterval(interval.current);
      };
    }, [animate, animation, limit, randomize, speed]);

    return (
      <StyledSVGWrapper {...props}>
        <StyledSVG
          height={`${size! * 0.9}px`}
          preserveAspectRatio="xMidYMid"
          ref={ref}
          version="1.1"
          viewBox="0 0 256 256"
          width={`${size! * 0.9}px`}
          xmlns="http://www.w3.org/2000/svg"
          {...rest}
        >
          <StyledPath d={circle.current} {...props} />
        </StyledSVG>
        {children}
      </StyledSVGWrapper>
    );
  },
);

Circle.defaultProps = {
  animate: false,
  limit: 30,
  mutation: 0,
  invert: false,
  size: 100,
  speed: 50,
  stroke: 2,
  variant: 'primary',
};
