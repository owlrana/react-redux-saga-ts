import * as React from 'react';
import styled, { css } from 'styled-components';

import { getColor, getTheme, px } from './utils/helpers';
import {
  baseStyles,
  appearanceStyles,
  inputStyles,
  mutationStyles,
  sx,
  system,
} from './utils/system';

import MutationWrapper from './MutationWrapper';

import { SelectProps } from './types';

export const StyledSelect = styled('select')<SelectProps>(
  (props) => {
    const { multiple, sizing = 'md', valid } = props;
    const currentColor = getColor(props, { includeColor: true });
    const {
      backgroundColor,
      color,
      borderColor,
      borderRadius,
      borderWidth,
      fontSize,
      height,
      lineHeight,
      padding,
      validation,
    } = getTheme(props, 'select');

    const currentBgColor = backgroundColor;
    let currentBorderColor = borderColor;

    if (valid) {
      currentBorderColor = validation.valid;
    } else if (valid === false) {
      currentBorderColor = validation.invalid;
    }

    const iconColor = currentColor.replace('#', '%23');

    return css`
      ${baseStyles};
      ${appearanceStyles};
      background-image: url('${`data:image/svg+xml,%3Csvg width="10px" height="6px" viewBox="0 0 10 6" version="1.1" xmlns="http://www.w3.org/2000/svg"%3E%3Cpolygon fill="${iconColor}" points="-8.8817842e-16 0 10 0 4.9980424 6"%3E%3C/polygon%3E%3C/svg%3E`}');
      background-repeat: no-repeat;
      background-position: right 8px center;
      background-color: ${currentBgColor};
      border: ${px(borderWidth)} solid ${currentBorderColor};
      border-radius: ${px(borderRadius)};
      color: ${color};
      display: block;
      ${!multiple ? `height: ${px(height[sizing])}` : ''};
      font-family: inherit;
      font-size: ${px(fontSize[sizing])};
      line-height: ${lineHeight};
      ${!multiple ? `padding: ${px(padding[sizing])};` : ''};
      white-space: nowrap;
      width: 100%;

      &[multiple] {
        > option {
          font-size: ${px(fontSize[sizing])};
          line-height: ${lineHeight};
          padding: ${px(padding[sizing])};
        }
      }
    `;
  },
  mutationStyles(),
  inputStyles,
  sx,
  system,
);

export const Select = React.forwardRef<HTMLSelectElement, SelectProps>((props, ref) => (
  <MutationWrapper {...props}>
    <StyledSelect ref={ref} {...props} />
  </MutationWrapper>
));

Select.defaultProps = {
  multiple: false,
  sizing: 'md',
};
