/*eslint-disable @typescript-eslint/no-use-before-define */
import * as deepmerge from 'deepmerge';
import css, { Theme as SystemTheme, CSSObject } from '@styled-system/css';
import { darken, getLuminance, lighten, parseToRgb } from './polished';

import { styleSystem } from './styles';
import * as defaultTheme from './theme';

import {
  Breakpoints,
  CommonProps,
  MediaQueries,
  NumberOrString,
  GenericObject,
  MutationResponse,
  RecursivePartial,
  ResponsiveObject,
  ResponsiveSizes,
  Theme,
} from '../types';

/**
 * Generate the media query
 */
export function createMediaQuery(size: ResponsiveSizes, mediaQueries: MediaQueries): string {
  if (isCSSUnit(size) || isNumericString(size)) {
    return `@media screen and (min-width: ${px(size)})`;
  }

  return mediaQueries[size];
}

/**
 * Get color from theme
 */
export function getColor(
  props: CommonProps,
  { base = 'primary', includeColor = false } = {},
): string {
  const { variant = '' } = props;
  const { colors } = getTheme(props);

  try {
    if (!variant && includeColor) {
      const { color } = getStyles(props);

      if (color) {
        return color;
      }
    }

    return colors[variant] || colors[base];
  } catch (error) {
    return colors.primary;
  }
}

export function getDarkColor(props: CommonProps) {
  const { darkColor } = getTheme(props);
  const color = getColor(props);

  return getReadableColor(darkColor, color);
}

export function getAccentColor(color: string, lighter = false): string {
  try {
    const luminance = getLuminance(color);
    let accent = darken(0.1, color);

    if (lighter) {
      accent = lighten(0.1, color);

      if (luminance < 0.1) {
        accent = lighten(0.2, color);
      } else if (luminance > 0.8) {
        accent = darken(0.05, color);
      } else if (luminance > 0.6) {
        accent = lighten(0.05, color);
      }

      return accent;
    }

    if (luminance < 0.05) {
      accent = lighten(0.1, color);
    } else if (luminance < 0.1) {
      accent = darken(0.1, color);
    }

    return accent;
  } catch (error) {
    /* istanbul ignore next */
    if (process.env.NODE_ENV === 'development') {
      console.error(error); //eslint-disable-line no-console
    }

    return color;
  }
}

export function getMediaQueries(breakpoints: Breakpoints): MediaQueries {
  return Object.keys(breakpoints)
    .filter((d) => Number.isNaN(parseInt(d, 10)))
    .reduce((acc: GenericObject, d) => {
      acc[d] = `@media screen and (min-width: ${px(breakpoints[d])})`;
      return acc;
    }, {}) as MediaQueries;
}

export function getMutation(props: CommonProps, skipTheme: boolean): MutationResponse {
  const theme = getTheme(props);
  const styles = whitelist(getStyles(props), ['margin', 'border']);

  const complexity = props.complexity ?? (!skipTheme ? theme.complexity : 0);
  const mutation = props.mutation ?? (!skipTheme ? theme.mutation : 0);
  const seed = props.seed ?? theme.seed;

  if (Array.isArray(mutation)) {
    const [rate, width, height] = mutation;

    return { complexity, height, mutation: rate, seed, width, ...styles };
  }

  return { complexity, mutation, seed, ...styles };
}

/**
 * Get percentage of positive numbers
 */
export function getPercentage(input: number, total: number) {
  return Number(parseFloat(String((100 * Math.max(0, input)) / Math.abs(total))).toFixed(2));
}

export function getProps(props: any = {}) {
  return {
    ...props,
    theme: mergeTheme(props.theme),
  };
}

export function getRandomInt(min = 1, max = 10, random = Math.random()) {
  return Math.floor(random * (max - min + 1) + min);
}

export function getReadableColor(baseColor: string, color: string): string {
  const limit = 75;
  let colorDiff = Math.abs(getYiq(baseColor) - getYiq(color));
  let readableColor = color;

  if (colorDiff >= limit) {
    return readableColor;
  }

  while (colorDiff < limit) {
    readableColor = lighten(0.05, readableColor);
    colorDiff = Math.abs(getYiq(baseColor) - getYiq(readableColor));
  }

  return readableColor;
}

export function getStyles(props: CommonProps) {
  const theme = getTheme(props);

  return replaceShorthands(css(pick(props))({ theme }));
}

export function getTextColor(props: CommonProps): string {
  try {
    const colors = getTheme(props, 'colors');
    const currentColor = getColor(props);

    return getYiq(currentColor) > 135 ? colors.black : colors.white;
  } catch (error) {
    return '#000';
  }
}

/**
 * Get the merged theme
 */
export function getTheme<T extends CommonProps>(props: T, path?: keyof Theme): any {
  const theme = mergeTheme(props?.theme || {});

  return path ? theme[path] : theme;
}

/**
 * Color contrast
 */
export function getYiq(color: string): number {
  try {
    const { red, green, blue } = parseToRgb(color);

    return (red * 299 + green * 587 + blue * 114) / 1000;
  } catch (error) {
    return 0;
  }
}

/** Check if a variable is a boolean **/
export function isBoolean(value: unknown): value is boolean {
  return typeof value === 'boolean';
}

export function isCSSUnit(value: unknown): value is string {
  const units = ['em', 'px', 'rem', 'vh', 'vmax', 'vmin', 'vw'];
  const regex = new RegExp(`\\d+(${units.join('|')})$`);

  return typeof value === 'string' && regex.test(value);
}

/** Check if a variable is defined **/
export function isDefined(value: unknown): boolean {
  return typeof value !== 'undefined';
}

/** Check if a variable is a number **/
export function isNumber(value: unknown): value is number {
  return typeof value === 'number';
}

export function isNumericString(value: unknown): value is string {
  return isString(value) && (value as string).length > 0 && !Number.isNaN(Number(value));
}

export function isString(value: unknown): value is string {
  return typeof value === 'string';
}

export function limitNumber(num: number, min = 0, max = 100) {
  return Math.min(Math.max(num, min), max);
}

export function pick(props: any) {
  const regex = new RegExp(`^(${styleSystem.propNames!.join('|')})$`);
  const rest: GenericObject = {};

  for (const key in props) {
    if ({}.hasOwnProperty.call(props, key) && regex.test(key)) {
      rest[key] = props[key];
    }
  }

  return rest;
}

/** Get textual unit value */
export function px(value: NumberOrString): string {
  return isNumber(value) || isNumericString(value) ? `${value}px` : value || '0px';
}

/**
 * Merge ThemeProvides's theme with the default theme
 */
export function mergeTheme(theme: RecursivePartial<Theme> = {}): Theme {
  return deepmerge((defaultTheme as unknown) as Theme, theme, {
    arrayMerge: (_dest: any[], source: any[]) => source,
  }) as Theme;
}

export function parseNumericCSSProp(value: NumberOrString): number {
  if (isNumber(value)) {
    return value;
  }

  if (value.indexOf('px') > 0) {
    return parseInt(value, 10);
  }

  const baseFontSize = parseFloat(getComputedStyle(document.documentElement).fontSize);

  return parseFloat(value) * baseFontSize;
}

/**
 * SC Helper to generate responsive media queries1
 */
export function responsive(rules: ResponsiveObject) {
  return (props: CommonProps) => {
    const { breakpoints } = getTheme(props);
    const entries: CSSObject = {};
    const mediaQueries = getMediaQueries(breakpoints);

    for (const rule in rules) {
      /* istanbul ignore else */
      if ({}.hasOwnProperty.call(rules, rule)) {
        const breakpoint = rule as ResponsiveSizes;
        const styles = css(replaceShorthands(rules[breakpoint] as CSSObject))(
          props as { theme: SystemTheme },
        );
        const query = createMediaQuery(breakpoint, mediaQueries);

        if (breakpoint === '_') {
          Object.entries(styles).forEach(([k, v]) => {
            entries[k] = v;
          });
        } else if (query) {
          entries[query] = styles;
        }
      }
    }

    return css(entries);
  };
}

export function replaceShorthands(styles: CSSObject): CSSObject {
  return Object.entries(styles).reduce((acc, [k, v]) => {
    switch (k) {
      case 'cl': {
        acc.color = v;
        break;
      }
      case 'h': {
        acc.height = v;
        break;
      }
      case 'w': {
        acc.width = v;
        break;
      }
      default: {
        acc[k] = v;
        break;
      }
    }

    return acc;
  }, {} as GenericObject);
}

/**
 * Helper to get the corresponding item from the space scale
 */
export function spacer(value: NumberOrString) {
  return (props: CommonProps): string => {
    const { space } = getTheme(props);

    return px(space[value] || value);
  };
}

export function whitelist(input: GenericObject, entries: string[]) {
  return Object.entries(input).reduce((acc, [key, value]) => {
    if (entries.some((e) => key.startsWith(e))) {
      acc[key] = value;
    }

    return acc;
  }, {} as GenericObject);
}
