import * as React from 'react';
import styled, { css } from 'styled-components';

import { getColor, getTheme, isBoolean, px } from './utils/helpers';
import { baseStyles, sx, system } from './utils/system';
import { Label } from './Label';

import { GenericObject, SwitchProps } from './types';

export interface SwitchPropsWithRef extends Omit<SwitchProps, 'ref'> {
  innerRef?: any;
}

interface InnerProps extends Omit<SwitchProps, 'name'> {
  status: boolean;
}

const StyledInput = styled('input')`
  bottom: 0;
  left: 0;
  opacity: 0.0001;
  position: absolute;
  right: 0;
  top: 0;
`;

const StyledTrack = styled('span')<InnerProps>((props) => {
  const { size, status } = props;
  const { sizes } = getTheme(props, 'switchOptions');
  const color = status ? getColor(props) : '#ccc';

  return css`
    background-color: ${color};
    border-radius: ${px(sizes[size!].borderRadius)};
    bottom: 0;
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
  `;
});

const StyledButton = styled('span')<InnerProps>((props) => {
  const { disabled, size, status } = props;
  const { innerBorderRadius, sizes } = getTheme(props, 'switchOptions');
  const currentSize = sizes[size!];

  return css`
    background-color: #fff;
    border-radius: ${px(innerBorderRadius)};
    bottom: ${px(currentSize.space)};
    left: ${status ? '50%' : px(currentSize.space)};
    opacity: ${disabled ? 0.7 : 1};
    position: absolute;
    top: ${px(currentSize.space)};
    transition: left 0.1s ease;
    width: ${px(currentSize.height - currentSize.space * 2)};
  `;
});

export const StyledSwitch = styled('div')<InnerProps>(
  (props) => {
    const { disabled, label, size } = props;
    const { marginLabel, sizes } = getTheme(props, 'switchOptions');
    const currentSize = sizes[size!];

    return css`
      ${baseStyles};
      cursor: ${disabled ? 'default' : 'pointer'};
      height: ${px(currentSize.height)};
      margin-right: ${label ? px(marginLabel) : 0};
      opacity: ${disabled ? 0.8 : 1};
      position: relative;
      user-select: none;
      vertical-align: middle;
      width: ${px(currentSize.width)};
    `;
  },
  sx,
  system,
);

class SwitchClass extends React.PureComponent<SwitchPropsWithRef, { status: boolean }> {
  constructor(props: SwitchPropsWithRef) {
    super(props);

    this.state = {
      status: isBoolean(props.checked) ? props.checked : props.defaultChecked!,
    };
  }

  static defaultProps = {
    defaultChecked: false,
    disabled: false,
    size: 'md',
    variant: 'primary',
  };

  componentDidUpdate(prevProps: SwitchProps) {
    const { checked } = this.props;

    if (isBoolean(checked) && prevProps.checked !== checked) {
      this.update(checked);
    }
  }

  update = (status: boolean) => {
    this.setState({ status });
  };

  handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { checked } = e.target;
    const { onChange } = this.props;

    this.update(checked);

    /* istanbul ignore else */
    if (onChange) {
      onChange(checked);
    }
  };

  render() {
    const { status } = this.state;
    const {
      checked,
      defaultChecked,
      disabled,
      innerRef,
      label,
      name,
      size,
      variant,
      ...rest
    } = this.props;
    const value = status ? 'on' : 'off';
    const checkStatus: GenericObject = {};
    let handleChange;

    if (isBoolean(checked)) {
      checkStatus.checked = checked;
    } else {
      handleChange = this.handleChange;
      checkStatus.defaultChecked = defaultChecked;
    }

    return (
      <Label cursor={disabled ? 'default' : 'pointer'}>
        <StyledInput
          aria-checked={status}
          aria-label={!label ? name : undefined}
          disabled={disabled || isBoolean(checked)}
          name={name}
          onChange={handleChange}
          ref={innerRef}
          role="switch"
          type="checkbox"
          value={value}
          {...checkStatus}
        />
        <StyledSwitch disabled={disabled} label={label} size={size} status={status} {...rest}>
          <StyledTrack size={size} status={status} variant={variant} />
          <StyledButton disabled={disabled} size={size} status={status} variant={variant} />
        </StyledSwitch>
        {label}
      </Label>
    );
  }
}

export const Switch = React.forwardRef<HTMLInputElement, SwitchPropsWithRef>((props, ref) => (
  <SwitchClass {...props} innerRef={ref} />
));
