import * as React from 'react';
import {
  BackgroundProps,
  BorderProps,
  FlexboxProps,
  GridProps,
  // ColorProps without TextColorProps
  BackgroundColorProps,
  OpacityProps,
  // LayoutProps without Size
  DisplayProps,
  HeightProps,
  MaxHeightProps,
  MaxWidthProps,
  MinHeightProps,
  MinWidthProps,
  OverflowProps,
  VerticalAlignProps,
  WidthProps,
  // LayoutProps end
  PositionProps,
  ResponsiveValue,
  SpaceProps,
  TypographyProps,
  ShadowProps,
} from 'styled-system';
import * as StyledSystemCSS from '@styled-system/css';
import * as CSS from 'csstype';

import { NumberOrString } from './common';
import { Theme } from './theme';

export type ResponsiveSizes = '_' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | string;

export type ResponsiveObject = {
  [key: string]: CSSProps;
};

export interface AnimationProps {
  animation?: ResponsiveValue<CSS.AnimationProperty>;
  animationDelay?: ResponsiveValue<CSS.GlobalsString>;
  animationDirection?: ResponsiveValue<CSS.AnimationDirectionProperty>;
  animationDuration?: ResponsiveValue<CSS.GlobalsString>;
  animationFillMode?: ResponsiveValue<CSS.AnimationFillModeProperty>;
  animationIterationCount?: ResponsiveValue<CSS.AnimationIterationCountProperty>;
  animationName?: ResponsiveValue<CSS.AnimationNameProperty>;
  animationPlayState?: ResponsiveValue<CSS.AnimationPlayStateProperty>;
  animationTimingFunction?: ResponsiveValue<CSS.AnimationTimingFunctionProperty>;
}

export interface OutlineProps {
  outline?: ResponsiveValue<CSS.OutlineProperty<any>>;
  outlineColor?: ResponsiveValue<CSS.OutlineColorProperty>;
  outlineOffset?: ResponsiveValue<CSS.OutlineOffsetProperty<any>>;
  outlineStyle?: ResponsiveValue<CSS.OutlineStyleProperty>;
  outlineWidth?: ResponsiveValue<CSS.OutlineWidthProperty<any>>;
}

export interface TransformProps {
  backfaceVisibility?: ResponsiveValue<CSS.BackfaceVisibilityProperty>;
  perspective?: ResponsiveValue<CSS.PerspectiveProperty<any>>;
  perspectiveOrigin?: ResponsiveValue<CSS.PerspectiveOriginProperty<any>>;
  rotate?: ResponsiveValue<CSS.RotateProperty>;
  scale?: ResponsiveValue<CSS.ScaleProperty>;
  transform?: ResponsiveValue<CSS.TransformProperty>;
  transformOrigin?: ResponsiveValue<CSS.TransformOriginProperty<any>>;
  transition?: ResponsiveValue<CSS.TransitionProperty>;
}

export type CSSProps =
  | StyledSystemCSS.SystemStyleObject
  | Record<
      string,
      | StyledSystemCSS.SystemStyleObject
      | StyledSystemCSS.ResponsiveStyleValue<NumberOrString>
      | Record<
          string,
          StyledSystemCSS.SystemStyleObject | StyledSystemCSS.ResponsiveStyleValue<NumberOrString>
        >
    >;

export interface StyleProps
  extends BackgroundProps,
    BorderProps,
    FlexboxProps,
    GridProps,
    // ColorProps without TextColorProps
    BackgroundColorProps,
    OpacityProps,
    // LayoutProps without Size
    DisplayProps,
    HeightProps,
    MaxHeightProps,
    MaxWidthProps,
    MinHeightProps,
    MinWidthProps,
    OverflowProps,
    VerticalAlignProps,
    WidthProps,
    // LayoutProps end
    PositionProps,
    SpaceProps,
    TypographyProps,
    ShadowProps,
    AnimationProps,
    OutlineProps,
    TransformProps {
  as?: React.ElementType;
  cl?: ResponsiveValue<CSS.ColorProperty>;
  css?: CSSProps;
  cursor?: ResponsiveValue<CSS.CursorProperty>;
  filter?: ResponsiveValue<CSS.FilterProperty>;
  h?: ResponsiveValue<CSS.HeightProperty<any>>;
  responsive?: ResponsiveObject;
  textDecoration?: ResponsiveValue<CSS.TextDecorationLineProperty>;
  textTransform?: ResponsiveValue<CSS.TextTransformProperty>;
  theme?: Theme;
  visibility?: ResponsiveValue<CSS.VisibilityProperty>;
  w?: ResponsiveValue<CSS.WidthProperty<any>>;
}
