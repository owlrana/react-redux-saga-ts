import { AnyObject, InvertKeyValue, NarrowPlainObject, QueryStringFormatOptions } from './types';
/**
 * Remove properties with undefined or empty string value from an object
 */
export declare function cleanUpObject<T = AnyObject>(input: T & NarrowPlainObject<T>): {
    [k: string]: any;
};
/**
 * Get a nested property inside an object or array
 */
export declare function getNestedProperty<T extends AnyObject>(input: T, path: string): any;
/**
 * Invert object key and value
 */
export declare function invertKeys<T extends AnyObject>(input: T & NarrowPlainObject<T>): InvertKeyValue<T>;
/**
 * Set the key as the value
 */
export declare function keyMirror<T extends AnyObject>(input: T & NarrowPlainObject<T>): {
    [K in keyof T]: K;
};
/**
 * Convert an object to an array of objects
 */
export declare function objectToArray<T extends AnyObject>(input: T & NarrowPlainObject<T>, includeOnly?: string): {
    [x: string]: any;
}[];
/**
 * Remove properties from an object
 */
export declare function omit<T extends AnyObject, K extends keyof T>(input: T & NarrowPlainObject<T>, ...filter: K[]): Omit<T, K>;
/**
 * Select properties from an object
 */
export declare function pick<T extends AnyObject, K extends keyof T>(input: T & NarrowPlainObject<T>, ...filter: K[]): Pick<T, K>;
/**
 * Stringify a shallow object into a query string
 */
export declare function queryStringFormat<T extends AnyObject>(input: T & NarrowPlainObject<T>, options?: QueryStringFormatOptions): string;
/**
 * Parse a query string
 */
export declare function queryStringParse(input: string): AnyObject<string>;
/**
 * Sort object keys
 */
export declare function sortObjectKeys<T extends AnyObject>(input: T & NarrowPlainObject<T>): AnyObject<any>;
