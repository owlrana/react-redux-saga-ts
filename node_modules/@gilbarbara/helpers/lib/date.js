"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.timestamp = exports.timeSince = exports.now = exports.isoDate = exports.isIsoDate = exports.YEAR = exports.MONTH = exports.WEEK = exports.DAY = exports.HOUR = exports.MINUTE = void 0;
var strings_1 = require("./strings");
exports.MINUTE = 60;
exports.HOUR = exports.MINUTE * 60;
exports.DAY = exports.HOUR * 24;
exports.WEEK = exports.DAY * 7;
exports.MONTH = exports.DAY * 30;
exports.YEAR = 365 * exports.DAY;
function isIsoDate(input) {
    if (!/\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z/.test(input)) {
        return false;
    }
    var date = new Date(input);
    return date.toISOString() === input;
}
exports.isIsoDate = isIsoDate;
function isoDate(input) {
    if (typeof input !== 'undefined') {
        return new Date(input).toISOString();
    }
    return new Date().toISOString();
}
exports.isoDate = isoDate;
function now() {
    return Math.floor(Date.now() / 1000);
}
exports.now = now;
/**
 * Returns how much time has passed since the input.
 */
function timeSince(input, options) {
    var _a = options || {}, _b = _a.day, day = _b === void 0 ? 'day' : _b, days = _a.days, _c = _a.hour, hour = _c === void 0 ? 'hour' : _c, hours = _a.hours, _d = _a.minute, minute = _d === void 0 ? 'minute' : _d, minutes = _a.minutes, _e = _a.month, month = _e === void 0 ? 'month' : _e, months = _a.months, prefix = _a.prefix, _f = _a.second, second = _f === void 0 ? 'second' : _f, seconds = _a.seconds, _g = _a.skipWeeks, skipWeeks = _g === void 0 ? false : _g, _h = _a.suffix, suffix = _h === void 0 ? 'ago' : _h, _j = _a.week, week = _j === void 0 ? 'week' : _j, weeks = _a.weeks, _k = _a.year, year = _k === void 0 ? 'year' : _k, years = _a.years;
    var date = typeof input === 'number' ? input : timestamp(input);
    var diff = now() - date;
    var quantity = Math.floor(diff / exports.YEAR);
    var output = function (value, caption) {
        return "".concat(prefix ? "".concat(prefix, " ") : '').concat(value, " ").concat(caption).concat(suffix ? " ".concat(suffix) : '');
    };
    if (quantity >= 1) {
        return output(quantity, (0, strings_1.pluralize)(quantity, year, years));
    }
    quantity = Math.floor(diff / exports.MONTH);
    if (quantity > 1) {
        return output(quantity, (0, strings_1.pluralize)(quantity, month, months));
    }
    if (!skipWeeks) {
        quantity = Math.floor(diff / exports.WEEK);
        if (quantity > 1) {
            return output(quantity, (0, strings_1.pluralize)(quantity, week, weeks));
        }
    }
    quantity = Math.floor(diff / exports.DAY);
    if (quantity >= 1) {
        return output(quantity, (0, strings_1.pluralize)(quantity, day, days));
    }
    quantity = Math.floor(diff / exports.HOUR);
    if (quantity >= 1) {
        return output(quantity, (0, strings_1.pluralize)(quantity, hour, hours));
    }
    quantity = Math.floor(diff / exports.MINUTE);
    if (quantity > 1) {
        return output(quantity, (0, strings_1.pluralize)(quantity, minute, minutes));
    }
    return output(Math.floor(diff), (0, strings_1.pluralize)(diff, second, seconds));
}
exports.timeSince = timeSince;
/**
 * Get the timestamp for a date.
 */
function timestamp(input) {
    if (!input) {
        return now();
    }
    var date = typeof input === 'string' ? new Date(input) : input;
    return Math.floor(date.getTime() / 1000);
}
exports.timestamp = timestamp;
//# sourceMappingURL=date.js.map