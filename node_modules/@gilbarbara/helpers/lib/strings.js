"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.slugify = exports.removeWhitespace = exports.removeTags = exports.removeNonPrintableCharacters = exports.removeEmptyTags = exports.removeEmojis = exports.removeAccents = exports.pluralize = exports.getInitials = exports.cleanupURI = exports.cleanupHTML = exports.capitalize = void 0;
/**
 * Capitalize the first letter
 */
function capitalize(input) {
    return input.charAt(0).toUpperCase() + input.slice(1);
}
exports.capitalize = capitalize;
/**
 * Cleanup HTML content
 */
function cleanupHTML(input) {
    return removeWhitespace(removeEmptyTags(input));
}
exports.cleanupHTML = cleanupHTML;
/**
 * Cleanup URI characters
 */
function cleanupURI(input) {
    return input.replace(/[$&+,/:;=?@]/g, '');
}
exports.cleanupURI = cleanupURI;
/**
 * Get initials from name
 */
function getInitials(input) {
    if (!input) {
        return '';
    }
    var names = input.trim().split(' ');
    if (names.length === 1) {
        return "".concat(names[0].charAt(0));
    }
    return "".concat(names[0].charAt(0)).concat(names[names.length - 1].charAt(0));
}
exports.getInitials = getInitials;
/**
 * Pluralize strings.
 *
 * If the plural form just adds an `s` to the end, you don't need to pass it.
 */
function pluralize(quantity, singular, plural) {
    if (quantity === 1) {
        return singular;
    }
    return plural || "".concat(singular, "s");
}
exports.pluralize = pluralize;
/**
 * Remove accents
 */
function removeAccents(input) {
    var removalMap = {
        A: /[AÀÁÂÃÄÅĀĂĄǍǞǠǺȀȂȦḀẠẢẤẦẨẪẬẮẰẲẴẶⒶＡ]/g,
        AA: /Ꜳ/g,
        AE: /[ÆǢǼ]/g,
        AO: /Ꜵ/g,
        AU: /Ꜷ/g,
        AV: /[ꜸꜺ]/g,
        AY: /Ꜽ/g,
        B: /[BƁƂɃḂḄḆⒷＢ]/g,
        C: /[CÇĆĈĊČƇȻḈⒸꜾＣ]/g,
        D: /[DĎĐƉƊƋḊḌḎḐḒⒹꝹＤ]/g,
        DZ: /[ǄǱ]/g,
        Dz: /[ǅǲ]/g,
        E: /[EÈÉÊËĒĔĖĘĚƎƐȄȆȨḔḖḘḚḜẸẺẼẾỀỂỄỆⒺＥ]/g,
        F: /[FƑḞⒻꝻＦ]/g,
        G: /[GĜĞĠĢƓǤǦǴḠⒼꝽꝾꞠＧ]/g,
        H: /[HĤĦȞḢḤḦḨḪⒽⱧⱵꞍＨ]/g,
        I: /[IÌÍÎÏĨĪĬĮİƗǏȈȊḬḮỈỊⒾＩ]/g,
        J: /[JĴɈⒿＪ]/g,
        K: /[KĶƘǨḰḲḴⓀⱩꝀꝂꝄꞢＫ]/g,
        L: /[LĹĻĽĿŁȽḶḸḺḼⓁⱠⱢꝆꝈꞀＬ]/g,
        LJ: /Ǉ/g,
        Lj: /ǈ/g,
        M: /[MƜḾṀṂⓂⱮＭ]/g,
        N: /[NÑŃŅŇƝǸȠṄṆṈṊⓃꞐꞤＮ]/g,
        NJ: /Ǌ/g,
        Nj: /ǋ/g,
        O: /[OÒÓÔÕÖØŌŎŐƆƟƠǑǪǬǾȌȎȪȬȮȰṌṎṐṒỌỎỐỒỔỖỘỚỜỞỠỢⓄꝊꝌＯ]/g,
        OI: /Ƣ/g,
        OO: /Ꝏ/g,
        OU: /Ȣ/g,
        P: /[PƤṔṖⓅⱣꝐꝒꝔＰ]/g,
        Q: /[QɊⓆꝖꝘＱ]/g,
        R: /[RŔŖŘȐȒɌṘṚṜṞⓇⱤꝚꞂꞦＲ]/g,
        S: /[SŚŜŞŠȘṠṢṤṦṨẞⓈⱾꞄꞨＳ]/g,
        T: /[TŢŤŦƬƮȚȾṪṬṮṰⓉꞆＴ]/g,
        TZ: /Ꜩ/g,
        U: /[UÙÚÛÜŨŪŬŮŰŲƯǓǕǗǙǛȔȖɄṲṴṶṸṺỤỦỨỪỬỮỰⓊＵ]/g,
        V: /[VƲɅṼṾⓋꝞＶ]/g,
        VY: /Ꝡ/g,
        W: /[WŴẀẂẄẆẈⓌⱲＷ]/g,
        X: /[XẊẌⓍＸ]/g,
        Y: /[YÝŶŸƳȲɎẎỲỴỶỸỾⓎＹ]/g,
        Z: /[ZŹŻŽƵȤẐẒẔⓏⱫⱿꝢＺ]/g,
        a: /[aàáâãäåāăąǎǟǡǻȁȃȧɐḁẚạảấầẩẫậắằẳẵặⓐⱥａ]/g,
        aa: /ꜳ/g,
        ae: /[æǣǽ]/g,
        ao: /ꜵ/g,
        au: /ꜷ/g,
        av: /[ꜹꜻ]/g,
        ay: /ꜽ/g,
        b: /[bƀƃɓḃḅḇⓑｂ]/g,
        c: /[cçćĉċčƈȼḉↄⓒꜿｃ]/g,
        d: /[dďđƌɖɗḋḍḏḑḓⓓꝺｄ]/g,
        dz: /[ǆǳ]/g,
        e: /[eèéêëēĕėęěǝȅȇȩɇɛḕḗḙḛḝẹẻẽếềểễệⓔｅ]/g,
        f: /[fƒḟⓕꝼｆ]/g,
        g: /[gĝğġģǥǧǵɠᵹḡⓖꝿꞡｇ]/g,
        h: /[hĥħȟɥḣḥḧḩḫẖⓗⱨⱶｈ]/g,
        hv: /ƕ/g,
        i: /[iìíîïĩīĭįıǐȉȋɨḭḯỉịⓘｉ]/g,
        j: /[jĵǰɉⓙｊ]/g,
        k: /[kķƙǩḱḳḵⓚⱪꝁꝃꝅꞣｋ]/g,
        l: /[lĺļľŀłſƚɫḷḹḻḽⓛⱡꝇꝉꞁｌ]/g,
        lj: /ǉ/g,
        m: /[mɯɱḿṁṃⓜｍ]/g,
        n: /[nñńņňŉƞǹɲṅṇṉṋⓝꞑꞥｎ]/g,
        nj: /ǌ/g,
        o: /[oòóôõöøōŏőơǒǫǭǿȍȏȫȭȯȱɔɵṍṏṑṓọỏốồổỗộớờởỡợⓞꝋꝍｏ]/g,
        oi: /ƣ/g,
        ou: /ȣ/g,
        oo: /ꝏ/g,
        p: /[pƥᵽṕṗⓟꝑꝓꝕｐ]/g,
        q: /[qɋⓠꝗꝙｑ]/g,
        r: /[rŕŗřȑȓɍɽṙṛṝṟⓡꝛꞃꞧｒ]/g,
        s: /[sßśŝşšșȿṡṣṥṧṩẛⓢꞅꞩｓ]/g,
        t: /[tţťŧƭțʈṫṭṯṱẗⓣⱦꞇｔ]/g,
        tz: /ꜩ/g,
        u: /[uùúûüũūŭůűųưǔǖǘǚǜȕȗʉṳṵṷṹṻụủứừửữựⓤｕ]/g,
        v: /[vʋʌṽṿⓥꝟｖ]/g,
        vy: /ꝡ/g,
        w: /[wŵẁẃẅẇẉẘⓦⱳｗ]/g,
        x: /[xẋẍⓧｘ]/g,
        y: /[yýÿŷƴȳɏẏẙỳỵỷỹỿⓨｙ]/g,
        z: /[zźżžƶȥɀẑẓẕⓩⱬꝣｚ]/g,
    };
    var parsedString = input;
    Object.entries(removalMap).forEach(function (_a) {
        var _b = __read(_a, 2), key = _b[0], value = _b[1];
        parsedString = parsedString.replace(value, key);
    });
    return parsedString;
}
exports.removeAccents = removeAccents;
/**
 * Remove emojis
 */
function removeEmojis(input) {
    return input
        .replace(/(?:[\u2700-\u27bf]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff])[\ufe0e\ufe0f]?(?:[\u0300-\u036f\u20d0-\u20f0\ufe20-\ufe23]|\ud83c[\udffb-\udfff])?(?:\u200d(?:[^\ud800-\udfff]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff])[\ufe0e\ufe0f]?(?:[\u0300-\u036f\u20d0-\u20f0\ufe20-\ufe23]|\ud83c[\udffb-\udfff])?)*/g, '')
        .trim();
}
exports.removeEmojis = removeEmojis;
/**
 * Remove empty HTML Tags (including whitespace)
 */
function removeEmptyTags(input) {
    return input.replace(/<[^/>][^>]*>\s*<\/[^>]+>/gi, '');
}
exports.removeEmptyTags = removeEmptyTags;
/**
 * Remove non-printable ASCII characters
 */
function removeNonPrintableCharacters(input) {
    return input.replace(/[^\x20-\x7E´\u00C0-\u00FFˆ˜]+/g, '');
}
exports.removeNonPrintableCharacters = removeNonPrintableCharacters;
/**
 * Remove HTML tags
 */
function removeTags(input) {
    return input.replace(/(<([^>]+)>)/gi, '');
}
exports.removeTags = removeTags;
/**
 * Remove whitespace
 */
function removeWhitespace(input) {
    return input.replace(/\r\n|\r|\n|\t/g, '').replace(/ +/g, ' ');
}
exports.removeWhitespace = removeWhitespace;
/**
 * Format string to slug
 */
function slugify(input) {
    return removeAccents(input)
        .replace(/[\u0300-\u036f]/g, '')
        .replace(/[()]/g, '')
        .replace(/ /g, '-')
        .replace(/["%<>\\^`{|}]/g, '')
        .toLowerCase();
}
exports.slugify = slugify;
//# sourceMappingURL=strings.js.map