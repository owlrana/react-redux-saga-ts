"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sortObjectKeys = exports.queryStringParse = exports.queryStringFormat = exports.pick = exports.omit = exports.objectToArray = exports.keyMirror = exports.invertKeys = exports.getNestedProperty = exports.cleanUpObject = void 0;
var is_lite_1 = require("is-lite");
/**
 * Remove properties with undefined or empty string value from an object
 */
function cleanUpObject(input) {
    return Object.fromEntries(Object.entries(input).filter(function (_a) {
        var _b = __read(_a, 2), _ = _b[0], v = _b[1];
        return ![undefined, ''].includes(v);
    }));
}
exports.cleanUpObject = cleanUpObject;
/**
 * Get a nested property inside an object or array
 */
function getNestedProperty(input, path) {
    if ((!is_lite_1.default.plainObject(input) && !is_lite_1.default.array(input)) || !path) {
        return input;
    }
    var segments = path.split('.');
    var length = segments.length;
    var output = input;
    var _loop_1 = function (index) {
        var currentSegment = segments[index];
        var remainingSegments = segments.slice(index + 1);
        if (currentSegment === '+' && is_lite_1.default.array(output) && remainingSegments.length === 1) {
            return { value: output.map(function (d) { return d[remainingSegments.join('.')]; }) };
        }
        try {
            output = output[currentSegment];
        }
        catch (_a) {
            // skip
        }
    };
    for (var index = 0; index < length; index++) {
        var state_1 = _loop_1(index);
        if (typeof state_1 === "object")
            return state_1.value;
    }
    return output;
}
exports.getNestedProperty = getNestedProperty;
/**
 * Invert object key and value
 */
function invertKeys(input) {
    var e_1, _a;
    if (!is_lite_1.default.plainObject(input)) {
        throw new TypeError('Expected an object');
    }
    var result = {};
    try {
        // eslint-disable-next-line no-restricted-syntax
        for (var _b = __values(Object.entries(input)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
            result[value] = key;
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return result;
}
exports.invertKeys = invertKeys;
/**
 * Set the key as the value
 */
function keyMirror(input) {
    if (!is_lite_1.default.plainObject(input)) {
        throw new TypeError('Expected an object');
    }
    var output = {};
    // eslint-disable-next-line no-restricted-syntax
    for (var key in input) {
        /* istanbul ignore else */
        if (!Object.prototype.hasOwnProperty.call(output, key)) {
            output[key] = key;
        }
    }
    return output;
}
exports.keyMirror = keyMirror;
/**
 * Convert an object to an array of objects
 */
function objectToArray(input, includeOnly) {
    if (!is_lite_1.default.plainObject(input)) {
        throw new TypeError('Expected an object');
    }
    return Object.entries(input)
        .filter(function (_a) {
        var _b = __read(_a, 2), value = _b[1];
        return (includeOnly ? typeof value === "".concat(includeOnly) : true);
    }) // eslint-disable-line valid-typeof
        .map(function (_a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        return (_b = {}, _b[key] = value, _b);
    });
}
exports.objectToArray = objectToArray;
/**
 * Remove properties from an object
 */
function omit(input) {
    var filter = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        filter[_i - 1] = arguments[_i];
    }
    if (!is_lite_1.default.plainObject(input)) {
        throw new TypeError('Expected an object');
    }
    var output = {};
    // eslint-disable-next-line no-restricted-syntax
    for (var key in input) {
        /* istanbul ignore else */
        if ({}.hasOwnProperty.call(input, key)) {
            if (!filter.includes(key)) {
                output[key] = input[key];
            }
        }
    }
    return output;
}
exports.omit = omit;
/**
 * Select properties from an object
 */
function pick(input) {
    var filter = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        filter[_i - 1] = arguments[_i];
    }
    if (!is_lite_1.default.plainObject(input)) {
        throw new TypeError('Expected an object');
    }
    if (!filter.length) {
        return input;
    }
    var output = {};
    // eslint-disable-next-line no-restricted-syntax
    for (var key in input) {
        /* istanbul ignore else */
        if ({}.hasOwnProperty.call(input, key)) {
            if (filter.includes(key)) {
                output[key] = input[key];
            }
        }
    }
    return output;
}
exports.pick = pick;
/**
 * Stringify a shallow object into a query string
 */
function queryStringFormat(input, options) {
    if (options === void 0) { options = {}; }
    var _a = options.addPrefix, addPrefix = _a === void 0 ? false : _a, _b = options.encodeValuesOnly, encodeValuesOnly = _b === void 0 ? true : _b, _c = options.encoder, encoder = _c === void 0 ? encodeURIComponent : _c;
    if (!is_lite_1.default.plainObject(input)) {
        throw new TypeError("input type isn't supported");
    }
    var isValidInput = Object.values(input).every(function (item) {
        if (is_lite_1.default.array(item)) {
            return item.every(function (d) { return is_lite_1.default.string(d) || is_lite_1.default.number(d); });
        }
        return is_lite_1.default.string(item);
    });
    if (!isValidInput) {
        throw new TypeError("input format isn't supported");
    }
    var output = Object.entries(input)
        .map(function (_a) {
        var _b = __read(_a, 2), key = _b[0], value = _b[1];
        var nextKey = encodeValuesOnly ? key : encoder(key);
        var nextValue = is_lite_1.default.array(value) ? value.map(encoder).join(',') : encoder("".concat(value));
        return "".concat(nextKey, "=").concat(nextValue);
    })
        .join('&');
    return "".concat(addPrefix ? '?' : '').concat(output);
}
exports.queryStringFormat = queryStringFormat;
/**
 * Parse a query string
 */
function queryStringParse(input) {
    var search = input;
    if (input.slice(0, 1) === '?') {
        search = input.slice(1);
    }
    return search.split('&').reduce(function (acc, d) {
        var _a = __read(d.split('='), 2), key = _a[0], value = _a[1];
        acc[decodeURIComponent(key)] = decodeURIComponent(value);
        return acc;
    }, {});
}
exports.queryStringParse = queryStringParse;
/**
 * Sort object keys
 */
function sortObjectKeys(input) {
    return Object.keys(input)
        .sort()
        .reduce(function (acc, key) {
        acc[key] = input[key];
        return acc;
    }, {});
}
exports.sortObjectKeys = sortObjectKeys;
//# sourceMappingURL=objects.js.map