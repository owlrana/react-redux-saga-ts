"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uuid = exports.unique = exports.popupCenter = exports.nullify = exports.noop = exports.logger = exports.isRequired = exports.isJSON = exports.copyToClipboard = void 0;
var numbers_1 = require("./numbers");
/**
 * Copy a string to the clipboard
 */
function copyToClipboard(input) {
    return __awaiter(this, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, navigator.clipboard.writeText(input)];
                case 1:
                    _b.sent();
                    return [3 /*break*/, 3];
                case 2:
                    _a = _b.sent();
                    return [2 /*return*/, false];
                case 3: return [2 /*return*/, true];
            }
        });
    });
}
exports.copyToClipboard = copyToClipboard;
/**
 * Check if a string is a valid JSON
 */
function isJSON(input) {
    try {
        JSON.parse(input);
    }
    catch (_a) {
        return false;
    }
    return true;
}
exports.isJSON = isJSON;
/**
 * Throw an error if the parameter isn't provided
 */
function isRequired(input, Constructable) {
    if (input === void 0) { input = 'parameter'; }
    if (Constructable === void 0) { Constructable = TypeError; }
    throw new Constructable("\"".concat(input, "\" is required"));
}
exports.isRequired = isRequired;
/**
 * Log grouped messages to the console
 */
function logger(type, title, data, options) {
    if (options === void 0) { options = {}; }
    /* eslint-disable no-console */
    var _a = options.collapsed, collapsed = _a === void 0 ? true : _a, _b = options.hideTimestamp, hideTimestamp = _b === void 0 ? false : _b, _c = options.skip, skip = _c === void 0 ? false : _c, _d = options.typeColor, typeColor = _d === void 0 ? 'gray' : _d;
    var groupMethod = collapsed ? console.groupCollapsed : console.group;
    var date = new Date();
    var parts = ["%c ".concat(type)];
    var styles = ["color: ".concat(typeColor, "; font-weight: lighter;"), 'color: inherit;'];
    if (!hideTimestamp) {
        styles.push('color: gray; font-weight: lighter;');
    }
    var time = "".concat((0, numbers_1.pad)(date.getHours(), 2), ":").concat((0, numbers_1.pad)(date.getMinutes(), 2), ":").concat((0, numbers_1.pad)(date.getSeconds(), 2));
    parts.push("%c".concat(title));
    if (!hideTimestamp) {
        parts.push("%c@ ".concat(time));
    }
    /* istanbul ignore else */
    if (!skip) {
        groupMethod.apply(void 0, __spreadArray([parts.join(' ')], __read(styles), false));
        console.log(data);
        console.groupEnd();
    }
    /* eslint-enable */
}
exports.logger = logger;
/**
 * A function that does nothing.
 */
function noop() {
    return undefined;
}
exports.noop = noop;
/**
 * Returns the value or null
 */
function nullify(value) {
    return value !== null && value !== void 0 ? value : null;
}
exports.nullify = nullify;
function popupCenter(url, title, width, height) {
    var screen = window.screen;
    var screenLeft = window.screenLeft;
    var screenTop = window.screenTop;
    var screenWidth = window.innerWidth;
    var screenHeight = window.innerHeight;
    /* istanbul ignore next */
    if (typeof screenLeft === 'undefined') {
        // @ts-ignore
        screenLeft = screen.left;
    }
    /* istanbul ignore next */
    if (typeof screenTop === 'undefined') {
        // @ts-ignore
        screenTop = screen.top;
    }
    /* istanbul ignore next */
    if (!screenWidth) {
        screenWidth = document.documentElement.clientWidth
            ? document.documentElement.clientWidth
            : screen.width;
    }
    /* istanbul ignore next */
    if (!screenHeight) {
        screenHeight = document.documentElement.clientHeight
            ? document.documentElement.clientHeight
            : screen.height;
    }
    var left = screenWidth / 2 - width / 2 + screenLeft;
    var top = screenHeight / 2 - height / 2 + screenTop;
    var popup = window.open(url, title, "menubar=no,location=no,resizable=no,scrollbars=yees,status=no,width=".concat(width, ",height=").concat(height, ",top=").concat(top, ", left=").concat(left));
    /* istanbul ignore else */
    if (popup) {
        popup.focus();
    }
    return popup;
}
exports.popupCenter = popupCenter;
/**
 * Return a unique string
 */
function unique(length, options) {
    if (length === void 0) { length = 8; }
    if (options === void 0) { options = {}; }
    var _a = options.includeLowercase, includeLowercase = _a === void 0 ? true : _a, _b = options.includeNumbers, includeNumbers = _b === void 0 ? true : _b, _c = options.includeSymbols, includeSymbols = _c === void 0 ? false : _c, _d = options.includeUppercase, includeUppercase = _d === void 0 ? true : _d;
    var lowercase = 'abcdefghijklmnopqrstuvwxyz';
    var uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    var numbers = '0123456789';
    var symbols = '!?@#$%^&*+_-=:.~';
    // const similarCharacters = /[ilLI|`oO0]/g;
    var characters = '';
    if (includeLowercase) {
        characters += lowercase;
    }
    if (includeUppercase) {
        characters += uppercase;
    }
    if (includeNumbers) {
        characters += numbers;
    }
    if (includeSymbols) {
        characters += symbols;
    }
    var result = '';
    for (var index = length; index > 0; --index) {
        result += characters[Math.round(Math.random() * (characters.length - 1))];
    }
    return result;
}
exports.unique = unique;
/**
 * Returns an UUID v4 string.
 */
function uuid() {
    /* eslint-disable no-bitwise */
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = (Math.random() * 16) | 0;
        var v = c === 'x' ? r : (r & 0x3) | 0x8;
        return v.toString(16);
    });
    /* eslint-enable */
}
exports.uuid = uuid;
//# sourceMappingURL=misc.js.map