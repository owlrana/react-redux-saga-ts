"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sleep = exports.request = exports.poll = exports.cors = void 0;
require("isomorphic-fetch");
var is_lite_1 = require("is-lite");
/**
 * Format a CORS response
 */
function cors(data, statusCodeOrOptions) {
    if (statusCodeOrOptions === void 0) { statusCodeOrOptions = 200; }
    var _a = is_lite_1.default.number(statusCodeOrOptions) ? { statusCode: statusCodeOrOptions } : statusCodeOrOptions, _b = _a.allowCredentials, allowCredentials = _b === void 0 ? true : _b, _c = _a.allowedHeaders, allowedHeaders = _c === void 0 ? [] : _c, _d = _a.methods, methods = _d === void 0 ? ['GET'] : _d, _e = _a.origin, origin = _e === void 0 ? '*' : _e, _f = _a.responseHeaders, responseHeaders = _f === void 0 ? undefined : _f, _g = _a.statusCode, statusCode = _g === void 0 ? 200 : _g;
    var allowMethods = __spreadArray(__spreadArray([], __read(methods), false), ['OPTIONS'], false);
    var allowHeaders = __spreadArray([], __read(new Set(__spreadArray([
        'Accept-Version',
        'Accept',
        'Authorization',
        'Content-Length',
        'Content-MD5',
        'Content-Type',
        'Date',
        'x-amz-date',
        'x-amz-security-token',
        'X-Api-Version',
        'X-CSRF-Token',
        'X-Requested-With'
    ], __read(allowedHeaders), false))), false);
    var exposedHeaders;
    if (responseHeaders) {
        exposedHeaders = __assign({ 'Access-Control-Expose-Headers': Object.keys(responseHeaders).join(',') }, responseHeaders);
    }
    return {
        body: JSON.stringify(data),
        headers: __assign({ 'Access-Control-Allow-Origin': origin, 'Access-Control-Allow-Credentials': allowCredentials, 'Access-Control-Allow-Methods': allowMethods.join(','), 'Access-Control-Allow-Headers': allowHeaders.join(',') }, exposedHeaders),
        statusCode: statusCode,
    };
}
exports.cors = cors;
/**
 *
 * @param condition
 * @param options
 */
function poll(condition, options) {
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var _a, delay, _b, maxRetries, retries;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _a = options.delay, delay = _a === void 0 ? 1 : _a, _b = options.maxRetries, maxRetries = _b === void 0 ? 5 : _b;
                    retries = 0;
                    _c.label = 1;
                case 1:
                    if (!(!condition() && retries <= maxRetries)) return [3 /*break*/, 3];
                    // eslint-disable-next-line no-await-in-loop
                    return [4 /*yield*/, sleep(delay)];
                case 2:
                    // eslint-disable-next-line no-await-in-loop
                    _c.sent();
                    retries++;
                    return [3 /*break*/, 1];
                case 3:
                    if (retries >= maxRetries) {
                        throw new Error('Timeout');
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.poll = poll;
/**
 * Make async requests
 */
function request(url, options) {
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var body, headers, _a, method, params;
        var _this = this;
        return __generator(this, function (_b) {
            body = options.body, headers = options.headers, _a = options.method, method = _a === void 0 ? 'GET' : _a;
            if (!url) {
                throw new Error('URL is required');
            }
            params = {
                headers: __assign({ Accept: 'application/json', 'Content-Type': 'application/json' }, headers),
                method: method,
            };
            if (body) {
                params.body = JSON.stringify(body);
            }
            return [2 /*return*/, fetch(url, params).then(function (response) { return __awaiter(_this, void 0, void 0, function () {
                    var text, content, error;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, response.text()];
                            case 1:
                                text = _a.sent();
                                try {
                                    content = JSON.parse(text);
                                }
                                catch (_b) {
                                    content = text;
                                }
                                if (response.status > 299) {
                                    error = new Error(response.statusText);
                                    error.status = response.status;
                                    error.response = content;
                                    throw error;
                                }
                                else {
                                    return [2 /*return*/, content];
                                }
                                return [2 /*return*/];
                        }
                    });
                }); })];
        });
    });
}
exports.request = request;
/**
 * Block execution
 */
function sleep(seconds) {
    if (seconds === void 0) { seconds = 1; }
    return new Promise(function (resolve) {
        setTimeout(resolve, seconds * 1000);
    });
}
exports.sleep = sleep;
//# sourceMappingURL=async.js.map