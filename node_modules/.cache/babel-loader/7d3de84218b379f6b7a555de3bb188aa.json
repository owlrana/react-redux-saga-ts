{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { topic } from 'config';\nimport { STATUS } from 'literals';\nimport { getRepos, getReposFailure, getReposSuccess } from 'actions';\nexport const githubState = {\n  topics: {}\n};\nexport default {\n  github: createReducer(githubState, builder => {\n    builder.addCase(getRepos, (draft, _ref) => {\n      let {\n        payload\n      } = _ref;\n      draft.topics[payload] = draft.topics[payload] || { ...topic\n      };\n      draft.topics[payload].message = '';\n      draft.topics[payload].status = STATUS.RUNNING;\n    }).addCase(getReposSuccess, (draft, _ref2) => {\n      let {\n        meta,\n        payload\n      } = _ref2;\n      const {\n        cached = false,\n        query = '',\n        updatedAt = 0\n      } = meta || {};\n      draft.topics[query] = draft.topics[query] || { ...topic\n      };\n      draft.topics[query].cached = cached;\n      draft.topics[query].data = payload;\n      draft.topics[query].status = STATUS.SUCCESS;\n      draft.topics[query].updatedAt = updatedAt;\n    }).addCase(getReposFailure, (draft, _ref3) => {\n      let {\n        meta,\n        payload\n      } = _ref3;\n      const {\n        query = ''\n      } = meta || {};\n      draft.topics[query] = draft.topics[query] || { ...topic\n      };\n      draft.topics[query].message = payload;\n      draft.topics[query].status = STATUS.ERROR;\n      draft.topics[query].updatedAt = 0;\n    });\n  })\n};","map":{"version":3,"sources":["/Users/rahulrana/react-redux-saga-boilerplate/src/reducers/github.ts"],"names":["createReducer","topic","STATUS","getRepos","getReposFailure","getReposSuccess","githubState","topics","github","builder","addCase","draft","payload","message","status","RUNNING","meta","cached","query","updatedAt","data","SUCCESS","ERROR"],"mappings":"AAAA,SAASA,aAAT,QAA8B,kBAA9B;AAEA,SAASC,KAAT,QAAsB,QAAtB;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA,SAASC,QAAT,EAAmBC,eAAnB,EAAoCC,eAApC,QAA2D,SAA3D;AAIA,OAAO,MAAMC,WAAwB,GAAG;AACtCC,EAAAA,MAAM,EAAE;AAD8B,CAAjC;AAIP,eAAe;AACbC,EAAAA,MAAM,EAAER,aAAa,CAAcM,WAAd,EAA2BG,OAAO,IAAI;AACzDA,IAAAA,OAAO,CACJC,OADH,CACWP,QADX,EACqB,CAACQ,KAAD,WAAwB;AAAA,UAAhB;AAAEC,QAAAA;AAAF,OAAgB;AACzCD,MAAAA,KAAK,CAACJ,MAAN,CAAaK,OAAb,IAAwBD,KAAK,CAACJ,MAAN,CAAaK,OAAb,KAAyB,EAAE,GAAGX;AAAL,OAAjD;AAEAU,MAAAA,KAAK,CAACJ,MAAN,CAAaK,OAAb,EAAsBC,OAAtB,GAAgC,EAAhC;AACAF,MAAAA,KAAK,CAACJ,MAAN,CAAaK,OAAb,EAAsBE,MAAtB,GAA+BZ,MAAM,CAACa,OAAtC;AACD,KANH,EAOGL,OAPH,CAOWL,eAPX,EAO4B,CAACM,KAAD,YAA8B;AAAA,UAAtB;AAAEK,QAAAA,IAAF;AAAQJ,QAAAA;AAAR,OAAsB;AACtD,YAAM;AAAEK,QAAAA,MAAM,GAAG,KAAX;AAAkBC,QAAAA,KAAK,GAAG,EAA1B;AAA8BC,QAAAA,SAAS,GAAG;AAA1C,UAAgDH,IAAI,IAAI,EAA9D;AAEAL,MAAAA,KAAK,CAACJ,MAAN,CAAaW,KAAb,IAAsBP,KAAK,CAACJ,MAAN,CAAaW,KAAb,KAAuB,EAAE,GAAGjB;AAAL,OAA7C;AAEAU,MAAAA,KAAK,CAACJ,MAAN,CAAaW,KAAb,EAAoBD,MAApB,GAA6BA,MAA7B;AACAN,MAAAA,KAAK,CAACJ,MAAN,CAAaW,KAAb,EAAoBE,IAApB,GAA2BR,OAA3B;AACAD,MAAAA,KAAK,CAACJ,MAAN,CAAaW,KAAb,EAAoBJ,MAApB,GAA6BZ,MAAM,CAACmB,OAApC;AACAV,MAAAA,KAAK,CAACJ,MAAN,CAAaW,KAAb,EAAoBC,SAApB,GAAgCA,SAAhC;AACD,KAhBH,EAiBGT,OAjBH,CAiBWN,eAjBX,EAiB4B,CAACO,KAAD,YAA8B;AAAA,UAAtB;AAAEK,QAAAA,IAAF;AAAQJ,QAAAA;AAAR,OAAsB;AACtD,YAAM;AAAEM,QAAAA,KAAK,GAAG;AAAV,UAAiBF,IAAI,IAAI,EAA/B;AAEAL,MAAAA,KAAK,CAACJ,MAAN,CAAaW,KAAb,IAAsBP,KAAK,CAACJ,MAAN,CAAaW,KAAb,KAAuB,EAAE,GAAGjB;AAAL,OAA7C;AAEAU,MAAAA,KAAK,CAACJ,MAAN,CAAaW,KAAb,EAAoBL,OAApB,GAA8BD,OAA9B;AACAD,MAAAA,KAAK,CAACJ,MAAN,CAAaW,KAAb,EAAoBJ,MAApB,GAA6BZ,MAAM,CAACoB,KAApC;AACAX,MAAAA,KAAK,CAACJ,MAAN,CAAaW,KAAb,EAAoBC,SAApB,GAAgC,CAAhC;AACD,KAzBH;AA0BD,GA3BoB;AADR,CAAf","sourcesContent":["import { createReducer } from '@reduxjs/toolkit';\n\nimport { topic } from 'config';\nimport { STATUS } from 'literals';\n\nimport { getRepos, getReposFailure, getReposSuccess } from 'actions';\n\nimport { GitHubState } from 'types';\n\nexport const githubState: GitHubState = {\n  topics: {},\n};\n\nexport default {\n  github: createReducer<GitHubState>(githubState, builder => {\n    builder\n      .addCase(getRepos, (draft, { payload }) => {\n        draft.topics[payload] = draft.topics[payload] || { ...topic };\n\n        draft.topics[payload].message = '';\n        draft.topics[payload].status = STATUS.RUNNING;\n      })\n      .addCase(getReposSuccess, (draft, { meta, payload }) => {\n        const { cached = false, query = '', updatedAt = 0 } = meta || {};\n\n        draft.topics[query] = draft.topics[query] || { ...topic };\n\n        draft.topics[query].cached = cached;\n        draft.topics[query].data = payload;\n        draft.topics[query].status = STATUS.SUCCESS;\n        draft.topics[query].updatedAt = updatedAt;\n      })\n      .addCase(getReposFailure, (draft, { meta, payload }) => {\n        const { query = '' } = meta || {};\n\n        draft.topics[query] = draft.topics[query] || { ...topic };\n\n        draft.topics[query].message = payload;\n        draft.topics[query].status = STATUS.ERROR;\n        draft.topics[query].updatedAt = 0;\n      });\n  }),\n};\n"]},"metadata":{},"sourceType":"module"}