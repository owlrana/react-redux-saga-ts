{"ast":null,"code":"import { applyMiddleware, compose, createStore } from 'redux';\nimport { persistCombineReducers, persistStore } from 'redux-persist';\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\nimport storage from 'redux-persist/lib/storage';\nimport reducers from 'reducers';\nimport rootSaga from 'sagas';\nimport middleware, { sagaMiddleware } from './middleware';\nconst rootReducer = persistCombineReducers({\n  key: 'rrsb',\n  stateReconciler: autoMergeLevel2,\n  storage,\n  blacklist: ['alerts'],\n  timeout: 0\n}, reducers);\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n/* istanbul ignore next */\n\nexport const configStore = function () {\n  let initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let additionalMiddleware = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const store = createStore(rootReducer, initialState, composeEnhancer(applyMiddleware(...additionalMiddleware, ...middleware)));\n  sagaMiddleware.run(rootSaga);\n\n  if (module.hot) {\n    module.hot.accept('reducers', () => {\n      store.replaceReducer(rootReducer);\n    });\n  }\n\n  return {\n    persistor: persistStore(store),\n    store\n  };\n};","map":{"version":3,"sources":["/Users/rahulrana/react-redux-saga-boilerplate/src/store/index.ts"],"names":["applyMiddleware","compose","createStore","persistCombineReducers","persistStore","autoMergeLevel2","storage","reducers","rootSaga","middleware","sagaMiddleware","rootReducer","key","stateReconciler","blacklist","timeout","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","configStore","initialState","additionalMiddleware","store","run","module","hot","accept","replaceReducer","persistor"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAyE,OAAzE;AACA,SAASC,sBAAT,EAAiCC,YAAjC,QAAqD,eAArD;AACA,OAAOC,eAAP,MAA4B,mDAA5B;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,QAAP,MAAqB,OAArB;AAIA,OAAOC,UAAP,IAAqBC,cAArB,QAA2C,cAA3C;AAEA,MAAMC,WAAW,GAAGR,sBAAsB,CACxC;AACES,EAAAA,GAAG,EAAE,MADP;AAEEC,EAAAA,eAAe,EAAER,eAFnB;AAGEC,EAAAA,OAHF;AAIEQ,EAAAA,SAAS,EAAE,CAAC,QAAD,CAJb;AAKEC,EAAAA,OAAO,EAAE;AALX,CADwC,EAQxCR,QARwC,CAA1C;AAWA,MAAMS,eAAe,GAAGC,MAAM,CAACC,oCAAP,IAA+CjB,OAAvE;AAEA;;AACA,OAAO,MAAMkB,WAAW,GAAG,YAAqE;AAAA,MAApEC,YAAoE,uEAAhD,EAAgD;AAAA,MAA5CC,oBAA4C,uEAAP,EAAO;AAC9F,QAAMC,KAAY,GAAGpB,WAAW,CAC9BS,WAD8B,EAE9BS,YAF8B,EAG9BJ,eAAe,CAAChB,eAAe,CAAC,GAAGqB,oBAAJ,EAA0B,GAAGZ,UAA7B,CAAhB,CAHe,CAAhC;AAMAC,EAAAA,cAAc,CAACa,GAAf,CAAmBf,QAAnB;;AAEA,MAAIgB,MAAM,CAACC,GAAX,EAAgB;AACdD,IAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,UAAlB,EAA8B,MAAM;AAClCJ,MAAAA,KAAK,CAACK,cAAN,CAAqBhB,WAArB;AACD,KAFD;AAGD;;AAED,SAAO;AACLiB,IAAAA,SAAS,EAAExB,YAAY,CAACkB,KAAD,CADlB;AAELA,IAAAA;AAFK,GAAP;AAID,CAnBM","sourcesContent":["import { applyMiddleware, compose, createStore, Middleware, Store } from 'redux';\nimport { persistCombineReducers, persistStore } from 'redux-persist';\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\nimport storage from 'redux-persist/lib/storage';\n\nimport reducers from 'reducers';\nimport rootSaga from 'sagas';\n\nimport { RootState } from 'types';\n\nimport middleware, { sagaMiddleware } from './middleware';\n\nconst rootReducer = persistCombineReducers<RootState>(\n  {\n    key: 'rrsb',\n    stateReconciler: autoMergeLevel2,\n    storage,\n    blacklist: ['alerts'],\n    timeout: 0,\n  },\n  reducers,\n);\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n/* istanbul ignore next */\nexport const configStore = (initialState: any = {}, additionalMiddleware: Middleware[] = []) => {\n  const store: Store = createStore(\n    rootReducer,\n    initialState,\n    composeEnhancer(applyMiddleware(...additionalMiddleware, ...middleware)),\n  );\n\n  sagaMiddleware.run(rootSaga);\n\n  if (module.hot) {\n    module.hot.accept('reducers', () => {\n      store.replaceReducer(rootReducer);\n    });\n  }\n\n  return {\n    persistor: persistStore(store),\n    store,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}