{"ast":null,"code":"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { HelmetProvider } from 'react-helmet-async';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/lib/integration/react';\nimport { configStore } from 'store';\nimport { showAlert } from 'actions';\nimport ErrorHandler from 'components/ErrorHandler';\nimport Loader from 'components/Loader';\nimport Reload from 'components/Reload';\nimport GlobalStyles from 'containers/GlobalStyles';\nimport reportWebVitals from './reportWebVitals';\nimport Root from './Root';\nimport { register } from './serviceWorkerRegistration';\nconst {\n  persistor,\n  store\n} = configStore();\nwindow.store = store;\nReactDOM.render( /*#__PURE__*/React.createElement(Provider, {\n  store: store\n}, /*#__PURE__*/React.createElement(PersistGate, {\n  loading: /*#__PURE__*/React.createElement(Loader, {\n    block: true,\n    size: 100\n  }),\n  persistor: persistor\n}, /*#__PURE__*/React.createElement(ErrorBoundary, {\n  FallbackComponent: ErrorHandler\n}, /*#__PURE__*/React.createElement(HelmetProvider, null, /*#__PURE__*/React.createElement(Root, null))), /*#__PURE__*/React.createElement(GlobalStyles, null))), document.getElementById('root'));\n/* istanbul ignore next */\n\nregister({\n  onUpdate: () => {\n    store.dispatch(showAlert( /*#__PURE__*/React.createElement(Reload, null), {\n      id: 'sw-update',\n      icon: 'bolt',\n      timeout: 0\n    }));\n  }\n}); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals(console.log); // eslint-disable-line no-console","map":{"version":3,"sources":["/Users/rahulrana/react-redux-saga-boilerplate/src/index.tsx"],"names":["React","ReactDOM","ErrorBoundary","HelmetProvider","Provider","PersistGate","configStore","showAlert","ErrorHandler","Loader","Reload","GlobalStyles","reportWebVitals","Root","register","persistor","store","window","render","document","getElementById","onUpdate","dispatch","id","icon","timeout","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,WAAT,QAA4B,qCAA5B;AACA,SAASC,WAAT,QAA4B,OAA5B;AAEA,SAASC,SAAT,QAA0B,SAA1B;AAEA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AAEA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,QAAT,QAAyB,6BAAzB;AAEA,MAAM;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,IAAuBV,WAAW,EAAxC;AAEAW,MAAM,CAACD,KAAP,GAAeA,KAAf;AAEAf,QAAQ,CAACiB,MAAT,eACE,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEF;AAAjB,gBACE,oBAAC,WAAD;AAAa,EAAA,OAAO,eAAE,oBAAC,MAAD;AAAQ,IAAA,KAAK,MAAb;AAAc,IAAA,IAAI,EAAE;AAApB,IAAtB;AAAmD,EAAA,SAAS,EAAED;AAA9D,gBACE,oBAAC,aAAD;AAAe,EAAA,iBAAiB,EAAEP;AAAlC,gBACE,oBAAC,cAAD,qBACE,oBAAC,IAAD,OADF,CADF,CADF,eAME,oBAAC,YAAD,OANF,CADF,CADF,EAWEW,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAXF;AAcA;;AACAN,QAAQ,CAAC;AACPO,EAAAA,QAAQ,EAAE,MAAM;AACdL,IAAAA,KAAK,CAACM,QAAN,CAAef,SAAS,eAAC,oBAAC,MAAD,OAAD,EAAa;AAAEgB,MAAAA,EAAE,EAAE,WAAN;AAAmBC,MAAAA,IAAI,EAAE,MAAzB;AAAiCC,MAAAA,OAAO,EAAE;AAA1C,KAAb,CAAxB;AACD;AAHM,CAAD,CAAR,C,CAMA;AACA;AACA;;AACAb,eAAe,CAACc,OAAO,CAACC,GAAT,CAAf,C,CAA8B","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { HelmetProvider } from 'react-helmet-async';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/lib/integration/react';\nimport { configStore } from 'store';\n\nimport { showAlert } from 'actions';\n\nimport ErrorHandler from 'components/ErrorHandler';\nimport Loader from 'components/Loader';\nimport Reload from 'components/Reload';\nimport GlobalStyles from 'containers/GlobalStyles';\n\nimport reportWebVitals from './reportWebVitals';\nimport Root from './Root';\nimport { register } from './serviceWorkerRegistration';\n\nconst { persistor, store } = configStore();\n\nwindow.store = store;\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={<Loader block size={100} />} persistor={persistor}>\n      <ErrorBoundary FallbackComponent={ErrorHandler}>\n        <HelmetProvider>\n          <Root />\n        </HelmetProvider>\n      </ErrorBoundary>\n      <GlobalStyles />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n/* istanbul ignore next */\nregister({\n  onUpdate: () => {\n    store.dispatch(showAlert(<Reload />, { id: 'sw-update', icon: 'bolt', timeout: 0 }));\n  },\n});\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log); // eslint-disable-line no-console\n"]},"metadata":{},"sourceType":"module"}