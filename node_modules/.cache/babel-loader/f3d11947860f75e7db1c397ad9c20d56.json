{"ast":null,"code":"import { now, request } from '@gilbarbara/helpers';\nimport { all, call, put, select, takeLatest } from 'redux-saga/effects';\nimport { hasValidCache } from 'modules/helpers';\nimport { ActionTypes } from 'literals';\nimport { getReposFailure, getReposSuccess } from 'actions';\n/**\n * Get Repos\n *\n * @param {Object} action\n *\n */\n\nexport function* getReposSaga(_ref) {\n  let {\n    payload\n  } = _ref;\n\n  try {\n    const {\n      data = [],\n      updatedAt = 0\n    } = yield select(s => {\n      var _s$github$topics;\n\n      return ((_s$github$topics = s.github.topics) === null || _s$github$topics === void 0 ? void 0 : _s$github$topics[payload]) || {};\n    });\n    const hasCache = hasValidCache(updatedAt);\n    let items;\n\n    if (!hasCache) {\n      ({\n        items = []\n      } = yield call(request, `https://api.github.com/search/repositories?q=${payload}&sort=stars`));\n    }\n\n    yield put(getReposSuccess(items || data, {\n      cached: hasCache,\n      query: payload,\n      updatedAt: now()\n    }));\n  } catch (error) {\n    yield put(getReposFailure(error.message, payload));\n  }\n}\n/**\n * GitHub Sagas\n */\n\nexport default function* root() {\n  yield all([takeLatest(ActionTypes.GITHUB_GET_REPOS_REQUEST, getReposSaga)]);\n}","map":{"version":3,"sources":["/Users/rahulrana/react-redux-saga-boilerplate/src/sagas/github.ts"],"names":["now","request","all","call","put","select","takeLatest","hasValidCache","ActionTypes","getReposFailure","getReposSuccess","getReposSaga","payload","data","updatedAt","s","github","topics","hasCache","items","cached","query","error","message","root","GITHUB_GET_REPOS_REQUEST"],"mappings":"AAAA,SAASA,GAAT,EAAcC,OAAd,QAA6B,qBAA7B;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,MAAzB,EAAiCC,UAAjC,QAAmD,oBAAnD;AAEA,SAASC,aAAT,QAA8B,iBAA9B;AAEA,SAASC,WAAT,QAA4B,UAA5B;AAEA,SAAmBC,eAAnB,EAAoCC,eAApC,QAA2D,SAA3D;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,UAAUC,YAAV,OAAiE;AAAA,MAA1C;AAAEC,IAAAA;AAAF,GAA0C;;AACtE,MAAI;AACF,UAAM;AAAEC,MAAAA,IAAI,GAAG,EAAT;AAAaC,MAAAA,SAAS,GAAG;AAAzB,QAA+B,MAAMT,MAAM,CAACU,CAAC;AAAA;;AAAA,aAAI,qBAAAA,CAAC,CAACC,MAAF,CAASC,MAAT,sEAAkBL,OAAlB,MAA8B,EAAlC;AAAA,KAAF,CAAjD;AACA,UAAMM,QAAQ,GAAGX,aAAa,CAACO,SAAD,CAA9B;AACA,QAAIK,KAAJ;;AAEA,QAAI,CAACD,QAAL,EAAe;AACb,OAAC;AAAEC,QAAAA,KAAK,GAAG;AAAV,UAAiB,MAAMhB,IAAI,CAC1BF,OAD0B,EAEzB,gDAA+CW,OAAQ,aAF9B,CAA5B;AAID;;AAED,UAAMR,GAAG,CACPM,eAAe,CAACS,KAAK,IAAIN,IAAV,EAAgB;AAAEO,MAAAA,MAAM,EAAEF,QAAV;AAAoBG,MAAAA,KAAK,EAAET,OAA3B;AAAoCE,MAAAA,SAAS,EAAEd,GAAG;AAAlD,KAAhB,CADR,CAAT;AAGD,GAfD,CAeE,OAAOsB,KAAP,EAAmB;AACnB,UAAMlB,GAAG,CAACK,eAAe,CAACa,KAAK,CAACC,OAAP,EAAgBX,OAAhB,CAAhB,CAAT;AACD;AACF;AAED;AACA;AACA;;AACA,eAAe,UAAUY,IAAV,GAAiB;AAC9B,QAAMtB,GAAG,CAAC,CAACI,UAAU,CAACE,WAAW,CAACiB,wBAAb,EAAuCd,YAAvC,CAAX,CAAD,CAAT;AACD","sourcesContent":["import { now, request } from '@gilbarbara/helpers';\nimport { all, call, put, select, takeLatest } from 'redux-saga/effects';\n\nimport { hasValidCache } from 'modules/helpers';\n\nimport { ActionTypes } from 'literals';\n\nimport { getRepos, getReposFailure, getReposSuccess } from 'actions';\n\n/**\n * Get Repos\n *\n * @param {Object} action\n *\n */\nexport function* getReposSaga({ payload }: ReturnType<typeof getRepos>) {\n  try {\n    const { data = [], updatedAt = 0 } = yield select(s => s.github.topics?.[payload] || {});\n    const hasCache = hasValidCache(updatedAt);\n    let items;\n\n    if (!hasCache) {\n      ({ items = [] } = yield call(\n        request,\n        `https://api.github.com/search/repositories?q=${payload}&sort=stars`,\n      ));\n    }\n\n    yield put(\n      getReposSuccess(items || data, { cached: hasCache, query: payload, updatedAt: now() }),\n    );\n  } catch (error: any) {\n    yield put(getReposFailure(error.message, payload));\n  }\n}\n\n/**\n * GitHub Sagas\n */\nexport default function* root() {\n  yield all([takeLatest(ActionTypes.GITHUB_GET_REPOS_REQUEST, getReposSaga)]);\n}\n"]},"metadata":{},"sourceType":"module"}